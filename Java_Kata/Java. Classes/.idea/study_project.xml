<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="StudySettings">
    <StudyTaskManager>
      <option name="course">
        <RemoteCourse>
          <option name="adaptive" value="false" />
          <option name="additionalMaterialsUpdateDate" value="0" />
          <option name="authors">
            <list>
              <StepicUser>
                <option name="accessToken" value="" />
                <option name="firstName" value="JetBrains" />
                <option name="guest" value="false" />
                <option name="id" value="17813950" />
                <option name="lastName" value="" />
                <option name="refreshToken" value="" />
              </StepicUser>
            </list>
          </option>
          <option name="compatible" value="false" />
          <option name="courseMode" value="Study" />
          <option name="courseType" value="PyCharm" />
          <option name="customPresentableName" />
          <option name="description" value="This is an introductory course to Java. Join the course for a basic introduction into the language, to learn about classes, and to practice using them in Java programs. &#10;&#10;For those of you who are just starting out on your learning journey, we recommend you do the “Java. Introduction” course first." />
          <option name="fromZip" value="false" />
          <option name="id" value="6864" />
          <option name="index" value="-1" />
          <option name="instructors">
            <list>
              <option value="17813950" />
            </list>
          </option>
          <option name="language" value="JAVA" />
          <option name="languageCode" value="en" />
          <option name="loadSolutions" value="true" />
          <option name="name" value="Java. Classes" />
          <option name="public" value="true" />
          <option name="sectionIds">
            <list>
              <option value="13475" />
            </list>
          </option>
          <option name="stepikChangeStatus" value="Up to date" />
          <option name="type" value="pycharm JAVA" />
          <option name="updateDate" value="1522347256000" />
          <option name="items">
            <list>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="77961" />
                <option name="index" value="1" />
                <option name="name" value="Objects" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="1521361833000" />
                <option name="taskList">
                  <list>
                    <TheoryTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;&lt;b&gt;Fundamentals of object-oriented programming&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Object-oriented programming (OOP)&lt;/b&gt; is a programming paradigm based on the concepts of &quot;objects&quot;, which may be characterized by a state and a behavior. Objects contain a state (data) in the fields (also known as attributes) and a behavior in the methods. In object-oriented programs, a set of objects interacts with each other to perform the program functions.&lt;/p&gt;&lt;p&gt;In an object-oriented program real-world (or not absolutely real) objects are modeled. For these objects, only essential characteristics should be selected. It's known as &lt;b&gt;data abstraction &lt;/b&gt;— a fundamental principle of OOP.&lt;b&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Hiding internal state of objects and requiring all interaction to be performed through methods is known as &lt;i&gt;&lt;/i&gt;&lt;i&gt;&lt;/i&gt;&lt;b&gt;data encapsulation&lt;/b&gt;&lt;i&gt;&lt;/i&gt;&lt;i&gt;&lt;/i&gt; — another fundamental principle of OOP.&lt;/p&gt;&lt;p&gt;The object-oriented paradigm is a common way to write Java applications.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Objects&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Here are a lot of real-world objects around you: pets, buildings, cars, computers, planes and so on. Even a computer program may be considered as an object.&lt;/p&gt;&lt;p&gt;It's possible to identify some important characteristics for real-world objects. For instance, we can consider a number of floors, year of constructing and an occupied area of a building. Also, we can consider a plane that can accommodate a certain number of passengers and transfers you from one city to another.&lt;/p&gt;&lt;p&gt;In OOP, an object's state (data) and behavior (methods) are placed together, but it's not always so. Sometimes, we will meet objects without state or methods.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Classes&lt;/b&gt;&lt;/p&gt;&lt;p&gt;In the real world, you will often find many individual objects that have similar characteristics. These objects may belong to the same type (or class). A class describes a structure of similar objects: fields and methods.&lt;/p&gt;&lt;p&gt;We can even say, that a class is a blueprint from which individual objects (instances) are created.&lt;/p&gt;&lt;p&gt;Let's look at some examples with pictures.&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Example 1. The building class&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;wysiwyg-text-align-center&quot;&gt;&lt;img width=&quot;201&quot; alt=&quot;&quot; src=&quot;https://ucarecdn.com/78d6be8a-c176-402f-8350-580a19fbccbe/&quot; height=&quot;151&quot;&gt;&lt;b&gt;An abstract building for describing buildings as a class (type)&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;wysiwyg-text-align-left&quot;&gt;It may have some attributes:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;a number of floors (an integer number);&lt;/li&gt;&lt;li&gt;an occupied area (a floating-point number, square meters);&lt;/li&gt;&lt;li&gt;a year of construction (an integer number);&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p class=&quot;wysiwyg-text-align-left&quot;&gt;Each object (instance) of the building type has the same attributes but different values.&lt;/p&gt;&lt;p class=&quot;wysiwyg-text-align-left&quot;&gt;For instance, we have two buildings (objects):&lt;/p&gt;&lt;p class=&quot;wysiwyg-text-align-left&quot;&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Building 1: the number of floors = 4, the occupied area = 2400.16, the year of construction = 1966;&lt;/li&gt;&lt;li&gt;Building 2: the number of floors = 6, the occupied area = 3200.54, the year of construction = 2001;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p class=&quot;wysiwyg-text-align-left&quot;&gt;It's quite difficult to find a behavior of a building. But this example shows attributes well.&lt;/p&gt;&lt;p class=&quot;wysiwyg-text-align-left&quot;&gt;&lt;b&gt;Example 2. The plane class&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;wysiwyg-text-align-left&quot;&gt;Unlike the building, it is easy to define a behavior of the plane. It can fly and transfer you between two points on the planet.&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;wysiwyg-text-align-center&quot;&gt;&lt;img width=&quot;143&quot; alt=&quot;&quot; src=&quot;https://ucarecdn.com/c0ef1059-5301-4e38-9030-62ec50f01b03/&quot; height=&quot;143&quot;&gt;&lt;b&gt;An abstract plane for describing all planes as a class (type)&lt;/b&gt;&lt;br&gt;&lt;/p&gt;It may have some attributes:&lt;div&gt;&lt;br&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;family name (a string, for example, &quot;Airbus A320&quot; or &quot;Boeing 777&quot;);&lt;/li&gt;&lt;li&gt;passengers capacity (an integer number);&lt;/li&gt;&lt;li&gt;standard speed (an integer number);&lt;/li&gt;&lt;li&gt;current coordinates (it's needed to fly);&lt;/li&gt;&lt;li&gt;and so on.&lt;/li&gt;&lt;/ul&gt;Also, it has a behavior (a method): transfer from one geographical point to another.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Objects of the plane class have the same attributes and a method transfer. But, the values of attributes and behavior, depending on the object state, may be different.&lt;/div&gt;&lt;p&gt;&lt;b&gt;Declaring classes&lt;/b&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;In Java, when writing an object-oriented program, first, we declare classes (or find the suitable classes in libraries) and then we create instances (objects) of these classes. You have already known at least one class from the Java Class Library. It's a widely used class String. Now it's time to declare own classes.&lt;/p&gt;&lt;p&gt;In terms of Java, classes are a mechanism used to group data (fields) and methods together into coherent modules. It makes your programs more structured and maintainable.&lt;br&gt;&lt;/p&gt;&lt;p&gt;The source code of classes is located in &lt;b&gt;.java&lt;/b&gt; files. Often the file contains a single class and has the name &lt;b&gt;yourClassName&lt;/b&gt;&lt;b&gt;.java&lt;/b&gt;. But it's not always so. After the compilation processes classes are located in &lt;b&gt;.class&lt;/b&gt; files that contain bytecode.&lt;/p&gt;&lt;p&gt;To declare a class Java provides a keyword &lt;b&gt;class&lt;/b&gt;.&lt;/p&gt;&lt;p&gt;Let's declare the class Nothing&lt;b&gt;&lt;/b&gt; consisting of nothing:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;class Nothing {&lt;br&gt;    // there is nothing&lt;br&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;The class doesn't contain any attributes (fields), but we can create an instance of the class.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Instantiating objects&lt;/b&gt;&lt;/p&gt;&lt;p&gt;To create an instance the keyword &lt;b&gt;new&lt;/b&gt; is used:&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Nothing nothing = new Nothing();&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Perhaps, creating an instance of the class Nothing sounds like a kind of magic. But soon everything will be clear.&lt;/p&gt;&lt;p&gt;Pay attention a class's name starts with a capital letter, according to the naming convention. If a class has a name with multiple words, each word starts with a capital letter. For example:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;MyCustomClass&#10;FastHttpConnector&#10;DemoApplication&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Also, we can create an instance of any standard class using the keyword &lt;b&gt;new&lt;/b&gt;.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Date now = new Date(); // it contains &quot;now&quot; date&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;There is no difference between instantiating your and standard classes in Java.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Class members&lt;/b&gt;&lt;/p&gt;&lt;p&gt;A Java class can contain fields, methods, and constructors.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Fields are variables that store data.&lt;/li&gt;&lt;li&gt;Methods are operations that the class or instances can perform.&lt;/li&gt;&lt;li&gt;Constructors are special kind of methods that initialize instances of the class. They must match the class name.&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Fields and methods are often considered as a class's members, constructors are not always, but they are a part of a class.&lt;/p&gt;&lt;p&gt;Not all Java classes have fields, constructors, and methods. Sometimes you have classes that only contain fields (data), and sometimes you have classes that only contain methods (operations). It depends on what the Java class is supposed to do.&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Example.&lt;/b&gt; Let's consider a more complex example.&lt;/p&gt;&lt;p&gt;There is a class for representing cats. A cat has a name and a state (sleeping or not). A cat can say one of two phrases &quot;meow&quot; or &quot;zzz&quot; depends on the state. When a cat says &quot;meow&quot; it can sometimes fall asleep. The cat can be awakened.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;/**&lt;br&gt; * The class is &quot;blueprint&quot; for cats&lt;br&gt; */&lt;br&gt;class Cat {&lt;br&gt;&lt;br&gt;    String name; // the cat's name&#10;    boolean sleeping; // the current state of the cat&#10;&#10;    /**&lt;br&gt;     * It constructs instances of the class by a given name&lt;br&gt;     */&#10;    public Cat(String name) {&lt;br&gt;        this.name = name;&lt;br&gt;        this.sleeping = true; // cats appear sleeping :)&lt;br&gt;    }&lt;br&gt;&lt;br&gt;    /**&lt;br&gt;     * Cats say &quot;meow&quot; if they are not sleeping, otherwise - &quot;zzz&quot;.&lt;br&gt;     * When cats say &quot;meow&quot; it can sometimes fall asleep.&#10;     */&lt;br&gt;    public void say() {&lt;br&gt;        if (sleeping) {&lt;br&gt;            System.out.println(&quot;zzz&quot;);&lt;br&gt;        } else {&lt;br&gt;            System.out.println(&quot;meow&quot;);&lt;br&gt;&lt;br&gt;            if (Math.random() &amp;gt; 0.5) {&lt;br&gt;                sleeping = true;&lt;br&gt;            }&lt;br&gt;        }&lt;br&gt;    }&lt;br&gt;&lt;br&gt;    /**&lt;br&gt;     * The method wakes cats&lt;br&gt;     */&lt;br&gt;    public void wakeUp() {&lt;br&gt;        this.sleeping = false;&lt;br&gt;    }&lt;br&gt;&lt;br&gt;    /**&lt;br&gt;     * Here, it's for convenient output cats.&lt;br&gt;     * The method will be studied later.&lt;br&gt;     */&lt;br&gt;    @Override&lt;br&gt;    public String toString() {&lt;br&gt;        return &quot;Cat{&quot; +&lt;br&gt;                &quot;name='&quot; + name + '\'' +&lt;br&gt;                &quot;, sleeping=&quot; + sleeping +&lt;br&gt;                '}';&lt;br&gt;    }&lt;br&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;To better understand the members of the class Cat read the provided comments.&lt;/p&gt;&lt;p&gt;Pay attention to the class constructor, it accepts a string parameter - name. To initialize fields the keyword &lt;b&gt;this&lt;/b&gt; is used. This keyword is a reference to a current instance of the class. It allows initializing the particular object. The keyword is often used to assign values to fields. But it's not always needed. Only in the cases, when the parameter's name is the same as the fields.&lt;/p&gt;&lt;p&gt;Also, look at the method toString(). It converts a cat to string. We will use it to output cats in the standard output. In more detail, this method will be studied later.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Invoking instance methods&lt;/b&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;We can create an instance of a class and invoke its methods.&lt;/p&gt;&lt;p&gt;See the following example where two instances of the class Cat are created. Do not forget, when a cat is created it is sleeping.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class CatsDemo {&lt;br&gt;&lt;br&gt;    public static void main(String[] args) {&lt;br&gt;&lt;br&gt;        Cat pharaoh = new Cat(&quot;Pharaoh&quot;); // an instance named &quot;pharaon&quot;&#10;        System.out.println(pharaoh);      // Cat{name='Pharaoh', sleeping=true}&#10;&#10;        pharaoh.wakeUp(); // invoking the instance method&#10;&#10;        System.out.println(pharaoh); // Cat{name='Pharaoh', sleeping=false}&#10;&#10;        for (int i = 0; i &amp;lt; 5; i++) {&lt;br&gt;            pharaoh.say(); // it says &quot;meow&quot; or &quot;zzz&quot;&lt;br&gt;        }&#10;&#10;        System.out.println(pharaoh); // The output will be different&#10;&#10;        Cat anonymous = new Cat(&quot;anonymous&quot;); // another instance named &quot;anonymous&quot;&#10;        System.out.println(anonymous);        // Cat{name='anonymous', sleeping=true}&lt;br&gt;    }&lt;br&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;It's important to understand that &quot;pharaoh&quot; and &quot;anonymous&quot; are different and independent instances of the same class. Each of them has own values of fields.&lt;/p&gt;&lt;p&gt;The program's output can be different because of using Math.random() inside the &quot;say&quot;&lt;b&gt;&lt;/b&gt; method. Here is an output example:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Cat{name='Pharaoh', sleeping=true}&lt;br&gt;Cat{name='Pharaoh', sleeping=false}&lt;br&gt;meow&lt;br&gt;meow&lt;br&gt;zzz&lt;br&gt;zzz&lt;br&gt;zzz&lt;br&gt;Cat{name='Pharaoh', sleeping=true}&lt;br&gt;Cat{name='anonymous', sleeping=true}&lt;/code&gt;&lt;/pre&gt; &lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Conclusion&lt;/b&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;Now you already know what is a class and an object in general and how to declare and create them in Java. The following topics based on the understanding this and object-oriented programming in general because it's one of the most important concepts in Java.&lt;/div&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="Theory" />
                      <option name="status" value="Solved" />
                      <option name="stepId" value="294494" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won’t be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521290395000" />
                    </TheoryTask>
                    <ChoiceTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="choiceVariants">
                        <list>
                          <option value="constructors" />
                          <option value="fields" />
                          <option value="methods" />
                        </list>
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="Which of the following concepts keep the state of an object?" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="2" />
                      <option name="multipleChoice" value="false" />
                      <option name="name" value="Quiz" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294510" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521290395000" />
                    </ChoiceTask>
                    <ChoiceTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="choiceVariants">
                        <list>
                          <option value="field" />
                          <option value="object" />
                          <option value="constructor" />
                          <option value="method" />
                        </list>
                      </option>
                      <option name="customPresentableName" value="Quiz" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="Any class has .." />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="3" />
                      <option name="multipleChoice" value="false" />
                      <option name="name" value="Quiz (1)" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294509" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521290395000" />
                    </ChoiceTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;&lt;b&gt;Application&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Implement a class Application. &lt;/p&gt;&lt;p&gt;The class should has: &lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;a string field which contains the name of the application instance;&lt;/li&gt;&lt;li&gt;a public constructor with single argument - application name. This argument should be assigned to the corresponding field;&lt;/li&gt;&lt;li&gt;a method run that takes array of strings. The method should output the name of the application and then all arguments, each in a new line.&lt;/li&gt;&lt;/ul&gt;There is a prepared template for your class. Do not make the class public.&lt;br&gt;&lt;p&gt;&lt;/p&gt;&lt;div&gt;An output example after calling the run method:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;&lt;code&gt;SimpleApplication&lt;br&gt;arg1&lt;br&gt;arg2&lt;br&gt;arg3&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="4" />
                      <option name="name" value="Programming" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294511" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="class Application {&#10;&#10;  // write a field here&#10;&#10;  // write a constructor here&#10;&#10;  public void run(String[] args) {&#10;    // implement a method&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521290395000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;You have a class &lt;b&gt;&lt;/b&gt;GeometricCube&lt;b&gt;&lt;/b&gt; with 3-arguments constructor:&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;public GeometricCube(int width, int height, int length)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Write a program that reads width, height and length, creates an instance named &lt;b&gt;cube&lt;/b&gt; and outputs the result of &lt;b&gt;cube.toString()&lt;/b&gt;.&lt;/p&gt;&lt;p&gt;Use the provided template, do not change it!&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="5" />
                      <option name="name" value="Programming (1)" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294512" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="import java.util.Scanner;&#10;&#10;&#10;public class Main {&#10;&#10;  public static void main(String[] args) {&#10;&#10;    Scanner scanner = new Scanner(System.in);&#10;&#10;    int width = scanner.nextInt();&#10;    int height = scanner.nextInt();&#10;    int length = scanner.nextInt();&#10;&#10;    // creating an instance&#10;&#10;    System.out.println(cube.toString());&#10;  }&#10;}&#10;&#10;class GeometricCube {&#10;  private int width;&#10;  private int height;&#10;  private int length;&#10;&#10;  public GeometricCube(int width, int height, int length) {&#10;    this.width = width;&#10;    this.height = height;&#10;    this.length = length;&#10;  }&#10;&#10;  @Override&#10;  public String toString() {&#10;    return &quot;Cube(&quot; +&#10;            &quot;w=&quot; + width +&#10;            &quot;, h=&quot; + height +&#10;            &quot;, l=&quot; + length + ')';&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521290395000" />
                    </CodeTask>
                    <ChoiceTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="choiceVariants">
                        <list>
                          <option value="Any primitive type" />
                          <option value="SomeClass" />
                          <option value="String" />
                          <option value="Date" />
                        </list>
                      </option>
                      <option name="customPresentableName" value="Quiz" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;You have the following class with a field.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;class SomeClass { &lt;br&gt;    private ??? field;&lt;br&gt;}&lt;/code&gt;&lt;/pre&gt; &lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Which types of these can have the field?&lt;/div&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="6" />
                      <option name="multipleChoice" value="true" />
                      <option name="name" value="Quiz (2)" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294513" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521290395000" />
                    </ChoiceTask>
                  </list>
                </option>
                <option name="unitId" value="54812" />
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="77962" />
                <option name="index" value="2" />
                <option name="name" value="Methods" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="1521363405000" />
                <option name="taskList">
                  <list>
                    <TheoryTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;The program decomposition&lt;/h2&gt;&lt;p&gt;A method is a sequence of statements grouped together to perform an operation. In Java, a method is always located inside a class. The relation between methods and classes will be learned further. In this topic, all methods will be located in the same class which contains the &lt;code&gt;main&lt;/code&gt; method.&lt;/p&gt;The main reason to write methods is to decompose a program into small reusable subroutines. They can be used many times instead of always re-writing the code. A decomposed program has a modular structure and it's much easier to modify and maintain such program than a program consisting of the single big main method. It is an important idea of the procedural programming.&lt;div&gt;&lt;br&gt;&lt;p&gt;In this topic, you will learn how to define new methods. It is assumed you've already known how to invoke existing methods.&lt;/p&gt;&lt;h2&gt;The base syntax of methods&lt;br&gt;&lt;/h2&gt;&lt;p&gt;In general case, a method has the following six components:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;a name;&lt;br&gt;&lt;/li&gt;&lt;li&gt;a set of modifiers (&lt;code&gt;public&lt;/code&gt;, &lt;code&gt;static&lt;/code&gt;, etc)&lt;br&gt;&lt;/li&gt;&lt;li&gt;a type of the return value;&lt;/li&gt;&lt;li&gt;a list of parameters (as well known as formal parameters) in parenthesis &lt;code&gt;()&lt;/code&gt;;&lt;br&gt;&lt;/li&gt;&lt;li&gt;a list of exceptions;&lt;/li&gt;&lt;li&gt;a body containing statements to perform the operation.&lt;br&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Some of these components are always required and others are optional.&lt;/p&gt;&lt;p&gt;Now, we will focus on 1, 3, 4 and 6 components. Modifiers will be learned in topics, related to object-oriented programming.&lt;/p&gt;&lt;h2&gt;Defining a simple method&lt;br&gt;&lt;/h2&gt;&lt;p&gt;Here is an example of a simple method that calculates the sum of two given numbers:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public static int sum(int a, int b) {&lt;br&gt;    return a + b;&lt;br&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;The &lt;code&gt;sum&lt;/code&gt; is a typical method written in Java. It returns the sum of two its parameters. The parameters are written in the parenthesis &lt;code&gt;&quot;(...)&quot;&lt;/code&gt;. To return the integer result the keyword &lt;code&gt;return&lt;/code&gt; is written.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;In general case, a returning value and parameters can have any type, including non-primitive types.&lt;br&gt;&lt;/p&gt;Also, the method has two modifiers: &lt;code&gt;public&lt;/code&gt; and &lt;code&gt;static&lt;/code&gt;.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;h2&gt;&lt;b&gt;&lt;/b&gt;Signatures&lt;b&gt;&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;The combination of the name of a method and its parameters is called the &lt;b&gt;signature&lt;/b&gt;. It doesn't include:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;the returning type&lt;/li&gt;&lt;li&gt;modifiers&lt;/li&gt;&lt;li&gt;names of parameters&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The considered method &lt;code&gt;sum&lt;/code&gt; has the signature &lt;code&gt;sum(int, int)&lt;/code&gt;.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Here are some examples of other signatures: &lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;sum(double, double)&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;min(long, long, long)&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;getValue()&lt;/code&gt;&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;Naming methods&lt;br&gt;&lt;/h2&gt;&lt;div&gt;&lt;div&gt;There are two kinds of restrictions for the name of a method: the compiler (required) and the naming convention (optional, but desired).&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The Java compiler requires that a method name can be a &lt;b&gt;legal identifier&lt;/b&gt;. The rules for legal identifiers are the following:&lt;/div&gt;&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;identifiers are case-sensitive;&lt;br&gt;&lt;/li&gt;&lt;li&gt;an identifier can include Unicode letters, digits, and two special characters (&lt;code&gt;$&lt;/code&gt;,&lt;code&gt;_&lt;/code&gt;);&lt;/li&gt;&lt;li&gt;an identifier can't start with a digit;&lt;/li&gt;&lt;li&gt;identifiers must not be a keyword.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;In addition, there is a naming convention that restricts possible method names. It's optional but desired for developers.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;By the convention, method names should be a verb in lowercase or multi-word name that begins with a verb in lowercase, followed by adjectives, nouns, etc. In multi-word names, the first letter of the second and the following words should be capitalized. Here are some correct examples:&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;&lt;code&gt;sum&lt;br&gt;getValue&lt;br&gt;calculateNumberOfOranges&lt;br&gt;findUserByName&lt;br&gt;printArray&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;b&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The listed methods satisfy the convention.&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;The type of a returning value and parameters.&lt;br&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;A method can return a single value or nothing. To declare a method returns nothing you should write the special keyword &lt;b&gt;void &lt;/b&gt;as the type of a result value.&lt;/p&gt;&lt;p&gt;The following method prints the sum of two given numbers and returns no value.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public static void printSum(int a, int b) {&#10;    System.out.println(a + b);&#10;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;A method can take one or multiple parameters of the same or different types. Also, it's possible to declare a method without any parameters, but &lt;b&gt;&quot;()&quot;&lt;/b&gt; are still required.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;/**&#10; * The method has an int parameter&#10; */&#10;public static void method1(int a) {&#10;    // do something&#10;}&#10;    &#10;/**&#10; * The method has long and double parameters&#10; */&#10;public static void method2(long a, double b) {&#10;    // do something&#10;}&#10;    &#10;/**&#10; * The method has no any parameters and returns a value&#10; */ &#10;public static int method3() {&#10;    return 3;&#10;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;When you call a method with a value of a primitive type then a copy of the value is created. Inside a method, you can process this copy. If you change it, the passed argument is not changed.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public static void main(String[] args) {&#10;    int val = 100; // 100&#10;    change(val); // try to change val&#10;    System.out.println(val); // it prints &quot;100&quot;, because the method changed a copy of the val&#10;}&#10;&#10;/**&#10; * The method changes a given value&#10; */ &#10;public static void change(int val) {&#10;    val = 400; // now, the copy is 400&#10;}&lt;/code&gt;&lt;/pre&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;As you can see, the method changed a copy of the given integer value 100.&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/div&gt;&lt;h2&gt;Method's body&lt;/h2&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;In a method's body, you can write any statements including the conditional statement, any loops, invoking methods and declaring local variables. The declared variables are visible only in this method.&lt;/p&gt;&lt;p&gt;If a method returns a value, the method's body must contain the &lt;code&gt;return&lt;/code&gt; keyword. Moreover, a method may have multiple returns. But each state can return only a single value.&lt;br&gt;&lt;/p&gt;&lt;p&gt;Let's see an example. The following method performs the integer division on a given value the specified number of times.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public static int divideBy2(int number, int times) {&lt;br&gt;    if (times &amp;lt;= 0) {&lt;br&gt;        return number;&lt;br&gt;    }&lt;br&gt;        &lt;br&gt;    for (int i = 0; i &amp;lt; times; i++) {&lt;br&gt;        number /= 2;&lt;br&gt;    }&lt;br&gt;        &lt;br&gt;    return number;&lt;br&gt;}&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;/p&gt;&lt;p&gt;The method &lt;code&gt;divideBy2&lt;/code&gt; takes two integers and returns another integer value. If the specified parameter &lt;code&gt;times&lt;/code&gt; is less than or equal to zero, the result is the given &lt;code&gt;number&lt;/code&gt;, otherwise, the method performs the integer division by two in a loop.&lt;b&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;If a method doesn't return a value (it has the keyword &lt;code&gt;void&lt;/code&gt;), the method body may contain the &lt;code&gt;return&lt;/code&gt; keyword without returning value. It allows finishing the method ahead of schedule, for example, depending on a condition.&lt;br&gt;&lt;/p&gt;&lt;p&gt;For example, the following method prints its arguments if given numbers are positive, otherwise, it performs the return statement.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public static void returnNothingOrPrintNumbers(int a, int b) {&lt;br&gt;    if (a &amp;lt;= 0 || b &amp;lt;= 0) {&lt;br&gt;        return;&lt;br&gt;    }&lt;br&gt;&lt;br&gt;    System.out.println(a + &quot; &quot; + b);&lt;br&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;div&gt;So, you can write any calculations in the body of a method.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;h2&gt;Conclusion&lt;/h2&gt;&lt;div&gt;Define a new method if you'd like to re-use a part of your code, or if the part is a well-separated code that can be changed independently. Methods allow you to decompose a program into some well-understood subroutines and manage them conveniently.&lt;/div&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="Theory" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294495" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won’t be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521361315000" />
                    </TheoryTask>
                    <ChoiceTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="choiceVariants">
                        <list>
                          <option value="It's possible to declare a method without arguments." />
                          <option value="A method can have the keyword static." />
                          <option value="A method always has to return a value." />
                          <option value="A method can be named &lt;code&gt;method11&lt;/code&gt;." />
                          <option value="A method can be declared outside of a class." />
                        </list>
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="Select all correct statements about methods in Java." />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="2" />
                      <option name="multipleChoice" value="true" />
                      <option name="name" value="Quiz" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294713" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521361316000" />
                    </ChoiceTask>
                    <ChoiceTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="choiceVariants">
                        <list>
                          <option value="printSum(123, 88L);" />
                          <option value="printSum(123L, 13);" />
                          <option value="printSum(123L, 88L);" />
                          <option value="printSum(123, 13);" />
                        </list>
                      </option>
                      <option name="customPresentableName" value="Quiz" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;You have the following method.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;public static void printSum(long val1, int val2) {&lt;br&gt;    System.out.println(val1 + val2);&lt;br&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Сhoose the correct invocations of this method.&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="3" />
                      <option name="multipleChoice" value="true" />
                      <option name="name" value="Quiz (1)" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294718" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521361316000" />
                    </ChoiceTask>
                    <TheoryTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Theory" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;&lt;b&gt;&lt;/b&gt;Methods overloading&lt;/h2&gt;&lt;p&gt;If methods have the same name, but a different number or type of parameters, they are &lt;b&gt;overloaded&lt;/b&gt;. It means you can invoke different methods by the same name by passing different arguments.&lt;br&gt;&lt;/p&gt;&lt;p&gt;As an example, let's consider some overloaded method from the standard class &lt;code&gt;Math&lt;/code&gt;:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;public static int abs(int a) { return (a &amp;lt; 0) ? -a : a; }&lt;br&gt;&lt;br&gt;public static float abs(float a) { return (a &amp;lt;= 0.0F) ? 0.0F - a : a; }&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;These methods have the same name but different type of the argument. They are overloaded.&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Important note: &lt;/b&gt;it's impossible to declare more than one method with the same name and parameters (number and types), even with different return types. The return type is not considered for overloading because it's not a part of the signature.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Here are three methods &lt;code&gt;print&lt;/code&gt; for printing different values.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;public static void print(String stringToPrint) {&lt;br&gt;    System.out.println(stringToPrint);&lt;br&gt;}&lt;br&gt;&lt;br&gt;public static void print(String stringToPrint, int times) {&lt;br&gt;    for (int i = 0; i &amp;lt; times; i++) {&lt;br&gt;        System.out.println(stringToPrint);&lt;br&gt;    }&lt;br&gt;}&lt;br&gt;&lt;br&gt;public static void print(int val) {&lt;br&gt;    System.out.println(val);&lt;br&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;The first method prints an input string, the second one prints an input string a given number of times and the last one prints an integer value. These methods are overloaded.&lt;/p&gt;&lt;p&gt;Let's invoke these methods:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;print(&quot;some string&quot;);&lt;br&gt;print(&quot;another string&quot;, 2);&lt;br&gt;print(5);&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;As you can see, it's possible to call any of these methods by the same name passing suitable arguments. The code outputs:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;some string&lt;br&gt;another string&lt;br&gt;another string&lt;br&gt;5&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;The overloading mechanism allows us not to write different names for methods that perform the similar operations.&lt;/p&gt;&lt;p&gt;Looking ahead, we note that overloading is a form of the static (compile-time) polymorphism.&lt;/p&gt;&lt;h2&gt;&lt;b&gt;&lt;/b&gt;Overloading and casting&lt;/h2&gt;&lt;p&gt;In the case, where the type of a method parameter is not exactly the same as the type of the passed argument, the compiler chooses the method that has the closest type of the argument in order of the implicit casting.&lt;/p&gt;&lt;p&gt;Let's see an example.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;public class OverloadingExample {&lt;br&gt;&lt;br&gt;    public static void print(short a) {&lt;br&gt;        System.out.println(&quot;short arg: &quot; + a);&lt;br&gt;    }&lt;br&gt;&lt;br&gt;    public static void print(int a) {&lt;br&gt;        System.out.println(&quot;int arg: &quot; + a);&lt;br&gt;    }&lt;br&gt;&lt;br&gt;    public static void print(long a) {&lt;br&gt;        System.out.println(&quot;long arg: &quot; + a);&lt;br&gt;    }&lt;br&gt;&lt;br&gt;    public static void print(double a) {&lt;br&gt;        System.out.println(&quot;double arg: &quot; + a);&lt;br&gt;    }&lt;br&gt;&lt;br&gt;    public static void main(String[] args) {&lt;br&gt;        print(100);&lt;br&gt;    }&lt;br&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Let's call &lt;code&gt;print(100)&lt;/code&gt;, the program outputs:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;int arg: 100&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Let's remove or comment the method &lt;code&gt;public static void print(int a)&lt;/code&gt;, then recompile and run the program again.&lt;b&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The result is:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;long arg: 100&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Ok, now, let's remove the method &lt;code&gt;public static void print(long a)&lt;/code&gt; too. After recompiling the program outputs:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;double arg: 100.0&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;If we remove the method &lt;code&gt;public static void print(double a)&lt;/code&gt; the program can't be compiled.&lt;/p&gt;&lt;p&gt;In this way, the compiler chooses the most suitable method in the order of implicit casting. If it's impossible we must cast an argument explicitly like in the following example:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt; public class OverloadingExample {&lt;br&gt;&lt;br&gt;    public static void print(short a) {&lt;br&gt;        System.out.println(&quot;short arg: &quot; + a);&lt;br&gt;    }&lt;br&gt;&lt;br&gt;    public static void main(String[] args) {&lt;br&gt;        print((short) 100);  // explicit casting &lt;br&gt;    }}&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="4" />
                      <option name="name" value="Theory (1)" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294714" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won’t be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521363389000" />
                    </TheoryTask>
                    <ChoiceTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="choiceVariants">
                        <list>
                          <option value="Two methods can have the same name, the same number and type of arguments." />
                          <option value="Two methods can have the same name, the same returning type, the same number and type of arguments." />
                          <option value="Two methods can have the same name, the same returning type but different type of arguments." />
                        </list>
                      </option>
                      <option name="customPresentableName" value="Quiz" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="Select a correct statement about methods and overloading." />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="5" />
                      <option name="multipleChoice" value="false" />
                      <option name="name" value="Quiz (2)" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294715" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521361316000" />
                    </ChoiceTask>
                    <TheoryTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Theory" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;&lt;b&gt;&lt;/b&gt;Defining and using constructors&lt;b&gt;&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;&lt;/h2&gt;&lt;p&gt;&lt;b&gt;&lt;/b&gt;Constructors&lt;b&gt;&lt;/b&gt; are special kind of methods that initialize a new object of the class. A constructor of a class is invoked when an instance of the class is created using the keyword &lt;code&gt;new&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Constructors have some differences from other methods:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;they have the same name as classes containing them;&lt;/li&gt;&lt;li&gt;they have no return type (even &lt;code&gt;void&lt;/code&gt;).&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Constructors initialize instances (objects) of the class. They set values to the fields when the object is creating. Also, constructors can take parameters for initializing fields by the given values.&lt;/p&gt;&lt;p&gt;Here is a class named &lt;code&gt;Patient&lt;/code&gt;. An object of the class has a name, an age, and a height. The class has a three-argument constructor to initialize objects with values.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;class Patient {    String name;    int age;    float height;    public Patient(String name, int age, int height) {        this.name = name;        this.age = age;        this.height = height;    }}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;The &lt;code&gt;Patient&lt;/code&gt; constructor takes three parameters. To initialize the fields, the keyword &lt;code&gt;this&lt;/code&gt; is used. It's a reference to the current instance (which is created) of the class. Use the keyword is required only if parameters have the same name as the fields (to separate them).&lt;/p&gt;&lt;p&gt;Let's create some instances of the class using the written constructor.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Patient patient1 = new Patient(&quot;Heinrich&quot;, 40, 182.0f);&lt;br&gt;Patient patient2 = new Patient(&quot;Mary&quot;, 33, 171.5f);&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Now we have two patients with different the fields values.&lt;/p&gt;&lt;h2&gt;Default and no-argument constructor&lt;b&gt;&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;The compiler automatically provides a default no-argument constructor for any class without constructors.&lt;/p&gt;&lt;p&gt;Let's see an example.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;class Nothing {&lt;br&gt;    // the class has default no-argument constructor}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;We can create an instance of the class &lt;code&gt;Nothing&lt;/code&gt; using the no-argument default constructor:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Nothing nothing = new Nothing();&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;If you will define a constructor, the default constructor will not be created.&lt;/p&gt;&lt;p&gt;Sometimes explicit no-arguments constructor initializes fields of a class by &quot;default&quot; values (for example &quot;Unknown&quot; for a name).&lt;/p&gt;&lt;p&gt;Here is an example:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;class Patient {    String name;    int age;    float height;    public Patient() {        this.name = &quot;Unknown&quot;; // sometimes, it may be better than null as the default value    }}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;&lt;/b&gt;Conclusion about constructors&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Any Java class has a constructor to initialize objects;&lt;br&gt;&lt;/li&gt;&lt;li&gt;A constructor has the same name as the class containing it;&lt;/li&gt;&lt;li&gt;A constructor has no the return type, even &lt;code&gt;void&lt;/code&gt;;&lt;/li&gt;&lt;li&gt;If a class has no explicit constructors, the java compilator automatically provides a default no-argument constructor.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="6" />
                      <option name="name" value="Theory (2)" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294716" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won’t be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521363404000" />
                    </TheoryTask>
                    <ChoiceTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="choiceVariants">
                        <list>
                          <option value="Constructor must have no explicit return type." />
                          <option value="Constructors can be considered as special types of methods." />
                          <option value="A constructor must have some parameters." />
                          <option value="Constructor name must be the same as its class name." />
                          <option value="It's impossible to create an instance of a class that has no an explicit constructor." />
                        </list>
                      </option>
                      <option name="customPresentableName" value="Quiz" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="Select all true statements about &lt;b&gt;constructors&lt;/b&gt; in Java." />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="7" />
                      <option name="multipleChoice" value="true" />
                      <option name="name" value="Quiz (3)" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294717" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521361316000" />
                    </ChoiceTask>
                    <ChoiceTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="choiceVariants">
                        <list>
                          <option value="SomeClass instance = SomeClass();" />
                          <option value="SomeClass instance = new SomeClass(2, 3);" />
                          <option value="SomeClass instance = new SomeClass(2);" />
                          <option value="SomeClass instance = new SomeClass(new int[] {1 , 2});" />
                          <option value="SomeClass instance = SomeClass(5);" />
                          <option value="SomeClass instance = new SomeClass();" />
                        </list>
                      </option>
                      <option name="customPresentableName" value="Quiz" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;You have the class &lt;b&gt;SomeClass&lt;/b&gt; with several constructors.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;class SomeClass {&lt;br&gt;&lt;br&gt;    public SomeClass(int arg1) {  }&lt;br&gt;    &#10;    public SomeClass(int arg1, int arg2) { }&lt;br&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;div&gt;Select all correct ways to create instances of the class.&lt;/div&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="8" />
                      <option name="multipleChoice" value="true" />
                      <option name="name" value="Quiz (4)" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294719" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521361316000" />
                    </ChoiceTask>
                    <ChoiceTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="choiceVariants">
                        <list>
                          <option value="It's impossible." />
                          <option value="SomeClass instance = new SomeClass(10);" />
                          <option value="SomeClass instance = SomeClass.defaultConstructor();" />
                          <option value="SomeClass instance = new SomeClass();" />
                        </list>
                      </option>
                      <option name="customPresentableName" value="Quiz" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="You have the class &lt;b&gt;SomeClass&lt;/b&gt; without any constructors.&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;class SomeClass {&#10;    int someField = 10;&#10;}&lt;/code&gt;&lt;/pre&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;div&gt;How can we create an instance of the class?&lt;/div&gt;&lt;/div&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="9" />
                      <option name="multipleChoice" value="false" />
                      <option name="name" value="Quiz (5)" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294711" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521361316000" />
                    </ChoiceTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;Given a class named &lt;code&gt;Movie&lt;/code&gt;. Write two constructors for the class.&lt;/p&gt;&lt;p&gt;The first constructor should take three arguments (&lt;code&gt;title&lt;/code&gt;, &lt;code&gt;desc&lt;/code&gt;, &lt;code&gt;year&lt;/code&gt;) and initialize the corresponding fields.&lt;/p&gt;&lt;p&gt;The second one should take only two arguments (&lt;code&gt;title&lt;/code&gt;, &lt;code&gt;year&lt;/code&gt;) and initialize name and year. In this case, the field &lt;code&gt;desc&lt;/code&gt; should have a value &lt;b&gt;&quot;empty&quot;&lt;/b&gt; (without &quot;&quot;).&lt;/p&gt;&lt;p&gt;Use the provided template, do not change it.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="10" />
                      <option name="name" value="Programming" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294720" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="class Movie {&#10;  private String title;&#10;  private String desc;&#10;  private int year;&#10;&#10;  // write two constructors here&#10;&#10;  public String getTitle() {&#10;    return title;&#10;  }&#10;&#10;  public String getDesc() {&#10;    return desc;&#10;  }&#10;&#10;  public int getYear() {&#10;    return year;&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521361316000" />
                    </CodeTask>
                    <ChoiceTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="choiceVariants">
                        <list>
                          <option value="val = 100, str = &quot;default&quot;" />
                          <option value="val = 50, str = &quot;another-value&quot;" />
                          <option value="val = 300, str = &quot;default&quot;" />
                          <option value="val = 50, str = &quot;some-value&quot;" />
                          <option value="val = 100, str = &quot;another-value&quot;" />
                          <option value="val = 50, str = &quot;default&quot;" />
                          <option value="val = 100, str = &quot;some-value&quot;" />
                          <option value="val = 300, str = &quot;some-value&quot;" />
                          <option value="val = 300, str = &quot;another-value&quot;" />
                        </list>
                      </option>
                      <option name="customPresentableName" value="Quiz" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;The class &lt;code&gt;SomeClass&lt;/code&gt; has four constructors:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;class SomeClass {&lt;br&gt;&lt;br&gt;    int val = 50;&lt;br&gt;    String str = &quot;default&quot;;&lt;br&gt;&lt;br&gt;    public SomeClass() {&lt;br&gt;       this(100);&lt;br&gt;    }&lt;br&gt;&lt;br&gt;    public SomeClass(int val) {&lt;br&gt;        val = val;&lt;br&gt;    }&lt;br&gt;&lt;br&gt;    public SomeClass(String str) {&lt;br&gt;        this();&lt;br&gt;        this.str = &quot;some-value&quot;;&lt;br&gt;    }&lt;br&gt;&lt;br&gt;    public SomeClass(int val, String str) {&lt;br&gt;        this(str);&lt;br&gt;    }&lt;br&gt;}&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;/p&gt;&lt;p&gt;Given an instance of the class:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;SomeClass instance = new SomeClass(300, &quot;another-value&quot;);&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Find the correct values of fields for this instance.&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="11" />
                      <option name="multipleChoice" value="false" />
                      <option name="name" value="Quiz (6)" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294712" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521361316000" />
                    </ChoiceTask>
                    <TheoryTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Theory" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Class members&lt;br&gt;&lt;/h2&gt;&lt;p&gt;An object of a class may have fields and methods. Objects differs in values of the fields. A class may also have fields and methods which are common for all objects. Such fields and methods are known as &lt;b&gt;static members&lt;/b&gt;. To declare them you should write the keyword &lt;code&gt;static&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;Class variables&lt;/h2&gt;&lt;p&gt;A &lt;b&gt;class variable (static field)&lt;/b&gt; is a field declared with the keyword &lt;code&gt;static&lt;/code&gt;. It can have any primitive or reference type like a regular instance field. A static field has the same value for all instances of the class. It belongs to the class, rather than to an instance of the class.&lt;/p&gt;&lt;p&gt;Sometimes we'd like to have a common value for all instances of a class like a global variable. Then it's much better to declare it static as this can save memory because a single copy of a static variable is shared by created objects.&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Static variables can be accessed directly by the class name. To access a static field you should write:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;ClassName.fieldName;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;b&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Example 1.&lt;/b&gt; Here is a class with two public static variables:&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;class SomeClass {&lt;br&gt;&lt;br&gt;    public static String staticStringField;&#10;&lt;br&gt;    public static int staticIntField;&lt;br&gt;} &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;We can set and get them:&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;SomeClass.staticIntField = 10;&#10;SomeClass.staticStringField = &quot;it's is a static member&quot;;&#10;&#10;System.out.println(SomeClass.staticIntField); // It prints &quot;10&quot;&#10;System.out.println(SomeClass.staticStringField); // It prints &quot;it's is a static member&quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Note,&lt;/b&gt; in general case, it's not a good idea to declare &lt;b&gt;public static fields&lt;/b&gt;, it's just an example.&lt;br&gt;&lt;/p&gt;&lt;p&gt;Also, it's possible to access the value of a static field through an instance of the class.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;SomeClass.staticIntField = 30;&lt;br&gt;&lt;br&gt;SomeClass instance = new SomeClass();&lt;br&gt;&lt;br&gt;System.out.println(instance.staticIntField); // It prints &quot;30&quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Example 2.&lt;/b&gt; Let's see a more interesting example. Here is a class with the static field &lt;code&gt;lastCreated&lt;/code&gt;. The field stores the date of the last created instance.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class SomeClass {&lt;br&gt;&lt;br&gt;    public static Date lastCreated;&lt;br&gt;&lt;br&gt;    public SomeClass() {&lt;br&gt;        lastCreated = new Date();&lt;br&gt;    }&lt;br&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;The static field is changed in the class constructor every time when a new object is created.&lt;/p&gt;&lt;p&gt;The code below creates two instances and outputs intermediate results:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;System.out.println(SomeClass.lastCreated);&#10;&#10;SomeClass instance1 = new SomeClass();&#10;System.out.println(SomeClass.lastCreated));&#10;&#10;SomeClass instance2 = new SomeClass();&#10;System.out.println(SomeClass.lastCreated)); &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;In my case, the results were:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;null&lt;br&gt;Sun Aug 20 17:49:24 YEKT 2017&lt;br&gt;Sun Aug 20 17:49:25 YEKT 2017&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;&lt;/b&gt;Class constants&lt;br&gt;&lt;/h2&gt;&lt;p&gt;&lt;b&gt;Static fields&lt;/b&gt; with the keyword &lt;code&gt;final&lt;/code&gt; are class constants. They can not be changed. According to the naming convention, static fields always should be written in the upper case, use the underscore (_) to separate parts of the name.&lt;/p&gt;&lt;p&gt;The standard class &lt;code&gt;Math&lt;/code&gt; contains two static constants:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public static final double E = 2.7182818284590452354;&lt;br&gt;&lt;br&gt;public static final double PI = 3.14159265358979323846;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Constants are often public, but it's not a rule.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Example.&lt;/b&gt; Let's declare a class named &lt;code&gt;Physics&lt;/code&gt; with two static constants:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;class Physics {&#10;&#10;    /**&#10;     * The speed of light in a vacuum (m/s)&#10;     */&#10;    public static final long SPEED_OF_LIGHT = 299_792_458;&#10;&#10;    /**&#10;     * Electron mass (kg)&#10;     */&#10;    public static final double ELECTRON_MASS = 9.10938356e-31;&#10;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;To use the constants let's write something like the following code:&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;System.out.println(Physics.ELECTRON_MASS); // 9.10938356E-31&#10;System.out.println(Physics.SPEED_OF_LIGHT); // 299792458&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;We cannot change the value of a constant:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Physics.ELECTRON_MASS = 10; // compile-time error&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;&lt;/b&gt;Class methods&lt;b&gt;&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;A class may have &lt;b&gt;static methods&lt;/b&gt; as well as &lt;b&gt;static fields&lt;/b&gt;. Such methods also are known as &lt;b&gt;class methods&lt;/b&gt;. A static method can be accessed by the class name and doesn't need an object.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Static methods can be called directly by the class name. To access a method you should write:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;ClassName.staticMethodName(args);&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;A static method can have (have no) arguments like a regular instance method.&lt;/p&gt;&lt;p&gt;But, unlike instance methods, static methods have several features:&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;a static method can access only static fields, it cannot access non-static fields;&lt;/li&gt;&lt;li&gt;a static method can invoke another static method, but it cannot invoke instance method;&lt;/li&gt;&lt;li&gt;a static method cannot refer to &lt;code&gt;this&lt;/code&gt; keyword because there is no an instance in the static context.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Instance methods can access static fields and methods.&lt;br&gt;&lt;/p&gt;&lt;p&gt;The Java class library provides a lot of static methods in different classes:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;the class &lt;code&gt;Math&lt;/code&gt; has a lot of static methods, such as &lt;code&gt;Math.min(a, b)&lt;/code&gt;, &lt;code&gt;Math.abs(val)&lt;/code&gt;, &lt;code&gt;Math.pow(x, y)&lt;/code&gt; and so on;&lt;/li&gt;&lt;li&gt;the class &lt;code&gt;Arrays&lt;/code&gt; has a lot of static methods for processing arrays;&lt;/li&gt;&lt;li&gt;&lt;code&gt;Long.valueOf(...)&lt;/code&gt;, &lt;code&gt;Integer.parseInt(...)&lt;/code&gt;, &lt;code&gt;String.valueOf(...)&lt;/code&gt; are static methods too.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;b&gt;Example.&lt;/b&gt; Here is a class with one constructor, a static and an instance method.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class SomeClass {&#10;    &#10;    public SomeClass() {&#10;        invokeAnInstanceMethod(); // it's possible here&#10;        invokeAStaticMethod();    // it's possible here too&#10;    }&#10;    &#10;    public static void invokeAStaticMethod() { &#10;        // it's impossible to invoke invokeAnInstanceMethod() here&#10;    }&#10;    &#10;    public void invokeAnInstanceMethod() { &#10;        invokeAStaticMethod();  // it's possible too&#10;    }&#10;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;This example shows, you can invoke a static method from the instance context (constructors and instance methods), but you can't invoke an instance method from a static context.&lt;/p&gt;&lt;p&gt;An example of a static method is the &lt;code&gt;main&lt;/code&gt; method. It always should be static.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="12" />
                      <option name="name" value="Theory (3)" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294722" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won’t be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521361415000" />
                    </TheoryTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;Implement a class named &lt;code&gt;Cat&lt;/code&gt; with two instance fields: string &lt;code&gt;name&lt;/code&gt; and int &lt;code&gt;age&lt;/code&gt;, and one static int field &lt;code&gt;counter&lt;/code&gt;. The static &lt;code&gt;counter&lt;/code&gt; field allows you to known how many cats have been already created.&lt;br&gt;&lt;/p&gt;&lt;p&gt;The class should have a constructor for initializing the instance fields. During the initialization of a new cat, the static field should be incremented. If the &lt;code&gt;counter &amp;gt; 5&lt;/code&gt;, the message &lt;b&gt;&quot;You have too many cats&quot;&lt;/b&gt; must be printed out in the &lt;code&gt;System.out&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Also, you need to implement a static method &lt;code&gt;getNumberOfCats&lt;/code&gt;. It should return the current numbers of created cats.&lt;b&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Use the provided template, do not make the class public.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Example. &lt;/b&gt;Let's assume seven instances of the class &lt;code&gt;Cat&lt;/code&gt; have been already created, then the correct implemented method &lt;code&gt;Cat.getNumberOfCats()&lt;/code&gt; should return 7 and the message &lt;b&gt;&quot;You have too many cats&quot;&lt;/b&gt; has to appear twice.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="13" />
                      <option name="name" value="Programming (1)" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294723" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="class Cat {&#10;&#10;  // write static and instance variables&#10;&#10;  public Cat(String name, int age) {&#10;    // implement the constructor&#10;    // do not forgot to check the number of cats&#10;  }&#10;&#10;  public static int getNumberOfCats() {&#10;    // implement the static method&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521361438000" />
                    </CodeTask>
                  </list>
                </option>
                <option name="unitId" value="54813" />
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="77963" />
                <option name="index" value="3" />
                <option name="name" value="Package" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="1521361819000" />
                <option name="taskList">
                  <list>
                    <TheoryTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;&lt;b&gt;&lt;/b&gt;Grouping classes together&lt;/h2&gt;&lt;p&gt;Large Java projects have a lot of classes. It's difficult to manage them if they are stored in the same directory. Packages provide a mechanism to group classes together into the same module (package). A package can contain others packages inside. It's like directories in a file system.&lt;/p&gt;&lt;p&gt;In general, packages give us the following advantages:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;to group related classes together that makes easier to figure out where a certain class you are looking for is;&lt;br&gt;&lt;/li&gt;&lt;li&gt;to avoid the conflict of class names;&lt;/li&gt;&lt;li&gt;to control access to classes and members together with access modifiers (it's considered in another topic).&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;According to the naming convention, packages are always written in lowercase, for example:&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;model&#10;collection&#10;utils&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Here is an example project with a simple packages and classes tree.&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://ucarecdn.com/119ac6ef-23fa-44bf-b5cc-a1b104a8f473/&quot;&gt;&lt;/p&gt;&lt;p class=&quot;wysiwyg-text-align-center&quot;&gt;&lt;b&gt;An example of multi-packages project structure&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Here is a directory &quot;src&quot; at the top of the tree. This is the source root directory. In this tree, the full name of the class User is &lt;b&gt;org.company.webapp.data.User&lt;/b&gt;.&lt;/p&gt;&lt;p&gt;You can output this using the following code:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;System.out.println(User.class.getName()); // org.company.webapp.data.User&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Classes declared inside a package has a special keyword &lt;b&gt;package&lt;/b&gt; at the top of the file.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;package org.company.webapp.data;&lt;br&gt;&lt;br&gt;public class User {&lt;br&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;&lt;/b&gt;Avoiding the conflict of class names&lt;/h2&gt;&lt;h2&gt;&lt;/h2&gt;&lt;p&gt;When you use external libraries the situation is possible that two classes have the same name. Packages allow avoiding the conflict of class names because the full class name includes names of packages. Also, it's needed to avoid the conflict between names of packages.&lt;/p&gt;&lt;p&gt;To avoid creating packages with the same names as other public packages it is recommended that you start your package hierarchy with the reverse domain name of your company (or another organization). For example:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;org.company&#10;org.stepik&#10;net.labs&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;&lt;/b&gt;Importing classes&lt;/h2&gt;&lt;h2&gt;&lt;/h2&gt;&lt;p&gt;If two classes are located in the same package there is no problem to use one class inside another. If one of these classes is located in another package, to use one class inside another you should write an import statement using the keyword&lt;b&gt; import&lt;/b&gt;.&lt;/p&gt;&lt;p&gt;Here is an example. We have two public classes in different packages:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;org.stepik.alt.java.packages.theory.p1.A&#10;org.stepik.alt.java.packages.theory.p2.B&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;To use the class B inside the class A we should make an import statement.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;package org.stepik.alt.java.packages.theory.p1;  // current package&#10;&#10;import org.stepik.alt.java.packages.theory.p2.B; // it's required to make the import&#10;&#10;public class A {&#10;&#10;    public static void method() {&#10;&#10;        B b = new B();&lt;br&gt;    }&lt;br&gt;}&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Also, it's possible to import all classes from the package, using &quot;*&quot; instead of a particular class name.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;import org.stepik.alt.java.packages.theory.p3.*; // import all classes from the package&lt;/code&gt;&lt;/pre&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;h2&gt;&lt;b&gt;&lt;/b&gt;Importing standard classes&lt;br&gt;&lt;/h2&gt;&lt;div&gt;There are no any differences between importing standard or custom classes.&lt;br&gt;&lt;/div&gt;&lt;div&gt;Many Java developers use java.util.Scanner for working with the standard input/output. In the programs they do the following import:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;import java.util.Scanner;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;b&gt;&lt;div&gt;&lt;b&gt;&lt;/b&gt;&lt;/div&gt;&lt;/b&gt;&lt;div&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/div&gt;And then it's possible to create an instance of the scanner. It looks like the considered examples above.&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;But Java has a package that always automatically imported. It's&lt;b&gt; java.lang&lt;/b&gt;. The package contains a lot of widely used classes including String, System, Long, Integer, NullPointerException and so on.&lt;/div&gt;&lt;h2&gt;&lt;br&gt;&lt;b&gt;&lt;/b&gt;Specifying the full class name instead of importing&lt;/h2&gt;&lt;h2&gt;&lt;/h2&gt;&lt;h2&gt;&lt;/h2&gt;&lt;div&gt;It's possible to use a class from another package without performing import statement. In this case, you can write the full class name (including full packages path) instead of the name of the class itself (short name).&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;java.util.Scanner scanner = new java.util.Scanner(System.in);&#10;&lt;pre&gt;java.util.Date now = new java.util.Date();&lt;/pre&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;b&gt;&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;&lt;/b&gt;Static imports&lt;/h2&gt;&lt;div&gt;It's possible to import static members (methods and fields) of a class inside the current class. In this case, we don't need to write the imported class name before the invoking static methods or reading static fields.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Here is an example of the static import of the class Array contains a lot of useful methods for processing arrays.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;package org.stepik.alt.java.packages.theory;&#10;&#10;import static java.util.Arrays.*; // instead of the statement &quot;import java.util.Arrays;&quot;&#10;&#10;public class Main {&lt;br&gt;&lt;br&gt;    public static void main(String[] args) {&#10;        int[] numbers = { 10, 4, 5, 47, 5, 12 }; // an array&#10;&#10;        sort(numbers); // instead of writing Arrays.sort(...)&#10;&#10;        int[] copy = copyOf(numbers, numbers.length); // instead of writing Arrays.copy(...)&#10;    }&lt;br&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;/div&gt;&lt;h2&gt;&lt;b&gt;&lt;/b&gt;Default package&lt;/h2&gt;&lt;div&gt;If a package statement is not used then the class will be placed in the default package. This package has a big disadvantage - classes located here can't be imported into classes located inside a named packages.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Do not use the default package for the real applications. It can be used only when writing simple &quot;Hello world&quot; applications.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;h2&gt;&lt;b&gt;&lt;/b&gt;Conclusion&lt;b&gt;&lt;/b&gt;&lt;/h2&gt;&lt;div&gt;Thus, the use of packages allows better structuring the source code and making it more maintainable. It's very important in big projects that can consist of thousand classes.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Packages allow avoiding the conflict of class names because of the full class name including whole packages path.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Also, packages affect the visibility of classes and members to each other.&lt;/div&gt;&lt;p&gt;&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="Theory" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294496" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won’t be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521361632000" />
                    </TheoryTask>
                    <ChoiceTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="choiceVariants">
                        <list>
                          <option value="to store variables" />
                          <option value="to store data as a database" />
                          <option value="to group classes" />
                          <option value="to prevent the conflict of class names" />
                          <option value=" to control access of classes and fields (together with access modifiers)" />
                        </list>
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="What are the packages used for?" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="2" />
                      <option name="multipleChoice" value="true" />
                      <option name="name" value="Quiz" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294725" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521361633000" />
                    </ChoiceTask>
                    <ChoiceTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="choiceVariants">
                        <list>
                          <option value="Import statement can't import a class from the default package into a java file inside a named package." />
                          <option value="Import statement can't import a class from a named package into a java file inside the default package." />
                          <option value="Any classes inside the default package are invisible for each other." />
                        </list>
                      </option>
                      <option name="customPresentableName" value="Quiz" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="Which of the following is a correct statement about the default packages in Java?" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="3" />
                      <option name="multipleChoice" value="false" />
                      <option name="name" value="Quiz (1)" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294724" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521361633000" />
                    </ChoiceTask>
                    <ChoiceTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="choiceVariants">
                        <list>
                          <option value="java.util" />
                          <option value="org.jetbrains.java.packages" />
                          <option value="any class from the default package" />
                          <option value="all subpackages of org.jetbrains.java.packages" />
                          <option value="java.lang" />
                        </list>
                      </option>
                      <option name="customPresentableName" value="Quiz" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;You have a class &lt;b&gt;Example&lt;/b&gt; in the package &lt;b&gt;org.jetbrains.java.packages&lt;/b&gt;. &lt;/p&gt;&lt;p&gt;Which of the following packages can you use in this class by short name without writing explicit import statements?&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="4" />
                      <option name="multipleChoice" value="true" />
                      <option name="name" value="Quiz (2)" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294726" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521361633000" />
                    </ChoiceTask>
                  </list>
                </option>
                <option name="unitId" value="54814" />
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="77964" />
                <option name="index" value="4" />
                <option name="name" value="Access modifiers" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="1521361862000" />
                <option name="taskList">
                  <list>
                    <TheoryTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;&lt;b&gt;&lt;/b&gt;Types of access modifiers&lt;/h2&gt;&lt;p&gt;In Java, there are several types of modifiers for controlling access to classes and members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;private;&lt;/li&gt;&lt;li&gt;package-private (also known as default, implicit);&lt;br&gt;&lt;/li&gt;&lt;li&gt;protected;&lt;/li&gt;&lt;li&gt;public.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Only private, protected and public modifiers have the corresponding keywords. The package-private access modifier has not a keyword, but it's used when no any keyword specified.&lt;/p&gt;&lt;h2&gt;&lt;b&gt;&lt;/b&gt;Access modifiers for classes&lt;/h2&gt;&lt;p&gt;A top-level class (not inner, not nested) can have one of two modifiers:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;package-private (default, no explicit modifier): a class is visible only for classes from the same package;&lt;/li&gt;&lt;li&gt;public: a class is visible to all classes everywhere.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;Here is a class inside the package &lt;b&gt;org.stepik.alt.java.packages.theory.p1. &lt;/b&gt;It has &lt;b&gt;&lt;/b&gt;package-private access.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;package org.stepik.alt.java.packages.theory.p1;&lt;br&gt;&lt;br&gt;class A {&lt;br&gt;&lt;br&gt;}&lt;/code&gt;&lt;/pre&gt; &lt;br&gt;The class is visible only for classes from the same package. It's not visible for classes from any other packages including:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;div&gt;org.stepik&lt;br&gt;&lt;/div&gt;&lt;div&gt;org.stepik.alt.java.packages.theory&#10;default package&#10;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Here is a public class inside the &lt;b&gt;package org.stepik.alt.java.packages.theory.p2&lt;/b&gt;.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;package org.stepik.alt.java.packages.theory.p2;&lt;br&gt;&lt;br&gt;public class B {&lt;br&gt;&lt;br&gt;}&lt;/code&gt;&lt;/pre&gt; &lt;br&gt;&lt;/div&gt;&lt;div&gt;The class is visible to all classes everywhere including the following packages:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;div&gt;org.stepik&lt;br&gt;&lt;/div&gt;&lt;div&gt;org.stepik.alt.java.packages.theory&lt;/div&gt;&lt;div&gt;org.stepik.alt.java.packages.theory.p1&lt;br&gt;&lt;/div&gt;default package&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/div&gt;&lt;h2&gt;&lt;b&gt;&lt;/b&gt;Access modifiers for members&lt;/h2&gt;&lt;p&gt;A class member (a field or a method) can have one of four modifiers:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;private: a member is visible only inside the class;&lt;/li&gt;&lt;li&gt;package-private: a member is visible only for classes from the same package;&lt;br&gt;&lt;/li&gt;&lt;li&gt;protected: a member is visible for classes from the same package and for subclasses even from other packages;&lt;/li&gt;&lt;li&gt;public: a member is visible for all classes everywhere.&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;A class constructor can also have any of listed access modifiers.&lt;/p&gt;&lt;p&gt;The following table shows access to members grouped by modifiers.&lt;/p&gt;&lt;p class=&quot;wysiwyg-text-align-center&quot;&gt;&lt;img width=&quot;379&quot; alt=&quot;&quot; src=&quot;https://ucarecdn.com/0c1aee24-39dd-48c7-ab72-cd7e9872db99/&quot; height=&quot;140&quot;&gt;&lt;b&gt;Levels of accessing members grouped by modifiers&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Note, in this table, by a subclass we mean only a subclass from another package.&lt;/p&gt;&lt;p&gt;Let's consider member modifiers in more detail.&lt;/p&gt;&lt;h2&gt;&lt;b&gt;&lt;/b&gt;Private members&lt;/h2&gt;&lt;p&gt;Fields are often declared private to control the access to them from the outside. In some cases, the fields are fully private and they are only used internally in the class. In other cases, the fields can be accessed via accessor methods (e.g. getters and setters).&lt;/p&gt;&lt;p&gt;Private methods are used to hidden internal low-level logic implementation from the other code and make public methods more concise and readable.&lt;/p&gt;&lt;p&gt;Here is the class Counter. It has a private field &quot;current&quot;. The field is hidden from outside world. The field can be changed only through the method &quot;inc()&quot; and read by the &quot;getCurrent()&quot; method.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class Counter {&lt;br&gt;    private long current = 0;&lt;br&gt;&lt;br&gt;    public long getCurrent() {&lt;br&gt;        return current;&lt;br&gt;    }&lt;br&gt;&lt;br&gt;    public long inc() {&lt;br&gt;        inc(1L);&lt;br&gt;        return current;&lt;br&gt;    }&lt;br&gt;&lt;br&gt;    private void inc(long val) {&lt;br&gt;        current += val;&lt;br&gt;    }&lt;br&gt;}&lt;/code&gt;&lt;/pre&gt; &lt;br&gt;A class constructor can be private too. In this case, it cannot be invoked outside the class. But it can be invoked from other public constructors or from the class methods.&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;h2&gt;&lt;b&gt;&lt;/b&gt;Package-private members&lt;/h2&gt;&lt;div&gt;Package-private access modifier has not required any keyword. If a field, a method or a constructor has this modifier then it can be read or changed from any class inside the same package.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;div&gt;Let's see an example. Here are two classes in the same package: SomeClass and AnotherClass.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The class SomeClass has a package-private field and a constructor. The instance of the class can be created and modified inside a method of AnotherClass.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class SomeClass {&lt;br&gt;    int field;&lt;br&gt;&lt;br&gt;    SomeClass(int field) {&lt;br&gt;        this.field = field;&lt;br&gt;    }&lt;br&gt;}&lt;br&gt;&lt;br&gt;public class AnotherClass {&lt;br&gt;    AnotherClass() {&lt;br&gt;        SomeClass clazz = new SomeClass(100);&lt;br&gt;        clazz.field = 540;&lt;br&gt;    }&lt;br&gt;}&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;h2&gt;Protected members&lt;br&gt;&lt;/h2&gt;&lt;div&gt;If a class member has the protected access modifier, it can be accessed from classes inside the same package and all subclasses of this class (including other packages). Inheritance and subclasses will be studied in the other topics.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;h2&gt;&lt;b&gt;&lt;/b&gt;Public members&lt;/h2&gt;&lt;div&gt;Public access modifier means that a field, a method or a constructor can be accessed from everywhere. It's often used for constructors, methods representing the class API and constant fields (public static final).&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;As a conclusion, there is an advice - use the most restrictive access level that makes sense for a particular member. Doesn't make all member public.&lt;/div&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="Theory" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294497" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won’t be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521361802000" />
                    </TheoryTask>
                    <ChoiceTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="choiceVariants">
                        <list>
                          <option value="stringField" />
                          <option value="instanceField" />
                          <option value="intField" />
                        </list>
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;You have a class with three fields:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;public class SomeClass {&lt;br&gt;&lt;br&gt;    private AnotherClass instanceField = new AnotherClass();&#10;&#10;    String stringField = &quot;&quot;;&#10;&#10;    protected int intField;&lt;br&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Which of these fields will be accessible from a method of the &lt;b&gt;AnotherClass&lt;/b&gt; in the same package (not default)?&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="2" />
                      <option name="multipleChoice" value="true" />
                      <option name="name" value="Quiz" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294730" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521361803000" />
                    </ChoiceTask>
                    <ChoiceTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="choiceVariants">
                        <list>
                          <option value="to use special methods for accessing fields - getters " />
                          <option value="to make the fields public" />
                          <option value="to make the fields package-private and put all needed classes into one package" />
                          <option value="to make public copy of these fields and to access them" />
                        </list>
                      </option>
                      <option name="customPresentableName" value="Quiz" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="In Java, a common way (but not always) to get access to a class fields is" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="3" />
                      <option name="multipleChoice" value="false" />
                      <option name="name" value="Quiz (1)" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294729" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521361803000" />
                    </ChoiceTask>
                    <TheoryTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Theory" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Data encapsulation&lt;/h2&gt;&lt;p&gt;According to the &lt;b&gt;data encapsulation&lt;/b&gt; principle, the fields of a class are hidden from a directly accessing from other classes. The fields can be accessed only through the methods of the current class.&lt;br&gt;&lt;/p&gt;&lt;p&gt;To access fields programmers write special types of methods: &lt;b&gt;getters&lt;/b&gt; and &lt;b&gt;setters&lt;/b&gt;. Getters can only read fields, setters can only write (modify) the fields. Both types of methods should be &lt;code&gt;public&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Using these methods gives some advantages:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;the fields of a class can be made read-only or write-only or both;&lt;/li&gt;&lt;li&gt;a class can have total control over values what are stored in the fields;&lt;/li&gt;&lt;li&gt;users of a class don't know how the class stores its data and don't depend on the fields.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;Getters and setters&lt;/h2&gt;&lt;p&gt;Java doesn't provide any special keywords for getter and setter methods. The main difference from the other methods is the name.&lt;br&gt;&lt;/p&gt;&lt;p&gt;According to the &lt;a rel=&quot;nofollow&quot; href=&quot;https://docstore.mik.ua/orelly/java-ent/jnut/ch06_02.htm&quot;&gt;JavaBeans Convention&lt;/a&gt;:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;getters &lt;/b&gt;start with &lt;b&gt;get&lt;/b&gt;, followed by the variable name, with the first letter of the variable name capitalized;&lt;/li&gt;&lt;li&gt;&lt;b&gt;setters &lt;/b&gt;start with &lt;b&gt;set&lt;/b&gt;, followed by the variable name, with the first letter of the variable name capitalized.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;This convention applies to any types except &lt;code&gt;boolean&lt;/code&gt;. A &lt;b&gt;getter&lt;/b&gt; for a boolean field start with &lt;b&gt;is&lt;/b&gt;, followed by the name variable name.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Example 1.&lt;/b&gt; The class &lt;code&gt;Account&lt;/code&gt; has four fields: &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;code&lt;/code&gt;, &lt;code&gt;balance&lt;/code&gt; and &lt;code&gt;enabled&lt;/code&gt;. Each field has keyword &lt;b&gt;private&lt;/b&gt; to hide the field from a directly accessing from other classes. Also, the class has &lt;b&gt;public&lt;/b&gt; getters and setters for accessing fields through these methods.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;class Account {&lt;br&gt;&lt;br&gt;    private long id;&lt;br&gt;    private String code;&lt;br&gt;    private long balance;&lt;br&gt;    private boolean enabled;&lt;br&gt;&lt;br&gt;    public long getId() {&lt;br&gt;        return id;&lt;br&gt;    }&lt;br&gt;&lt;br&gt;    public void setId(long id) {&lt;br&gt;        this.id = id;&lt;br&gt;    }&lt;br&gt;&lt;br&gt;    public String getCode() {&lt;br&gt;        return code;&lt;br&gt;    }&lt;br&gt;&lt;br&gt;    public void setCode(String code) {&lt;br&gt;        this.code = code;&lt;br&gt;    }&lt;br&gt;&lt;br&gt;    public long getBalance() {&lt;br&gt;        return balance;&lt;br&gt;    }&lt;br&gt;&lt;br&gt;    public void setBalance(long balance) {&lt;br&gt;        this.balance = balance;&lt;br&gt;    }&lt;br&gt;&lt;br&gt;    public boolean isEnabled() {&lt;br&gt;        return enabled;&lt;br&gt;    }&lt;br&gt;&lt;br&gt;    public void setEnabled(boolean enabled) {&lt;br&gt;        this.enabled = enabled;&lt;br&gt;    }&lt;br&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Pay attention, the boolean field &lt;code&gt;enabled&lt;/code&gt; has the different getter name. It starts with the word &lt;code&gt;is&lt;/code&gt; instead of &lt;code&gt;get&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Let's create an instance of the class and fill the fields, then read values from the fields and output them.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Account account = new Account();&lt;br&gt;&lt;br&gt;account.setId(1000);&#10;account.setCode(&quot;62968503812&quot;);&#10;account.setBalance(100_000_000);&#10;account.setEnabled(true);&#10;&#10;System.out.println(account.getId());      // 1000&#10;System.out.println(account.getCode());    // 62968503812&#10;System.out.println(account.getBalance()); // 100000000&#10;System.out.println(account.isEnabled());  // true&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Sometimes, &lt;b&gt;getters &lt;/b&gt;or &lt;b&gt;setters&lt;/b&gt; can contain a more difficult logic. &lt;b&gt;Getters&lt;/b&gt; may return non-stored values (calculated at runtime), or &lt;b&gt;setters&lt;/b&gt; may modify the value of a field not in all cases. But often, getters and setters have a minimum of a programming logic.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Example 2.&lt;/b&gt; In the following class, the setter &lt;code&gt;setName&lt;/code&gt; doesn't change the current value of the passed value is &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;class Patient {&#10;&#10;    private String name;&#10;&#10;    public Patient(String name) {&#10;        this.name = name;&#10;    }&#10;&#10;    public String getName() {&#10;        return this.name;&#10;    }&#10;    &#10;    public void setName(String name) {&#10;        if (name != null) {&#10;            this.name = name;&#10;        }&#10;    }&#10;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;Conclusion&lt;/h2&gt;&lt;p&gt;To access fields from external access make them &lt;code&gt;private&lt;/code&gt; and write suitable &lt;b&gt;getters/setters&lt;/b&gt; to &lt;b&gt;read/change &lt;/b&gt;only fields you need. Use the naming convention when writing the methods.&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;/b&gt;Note,&lt;b&gt;&lt;/b&gt; modern IDEs (such as &lt;b&gt;IntelliJ IDEA&lt;/b&gt;) can generate getters and setters automatically based on class fields.&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="4" />
                      <option name="name" value="Theory (1)" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294727" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won’t be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521361802000" />
                    </TheoryTask>
                    <ChoiceTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="choiceVariants">
                        <list>
                          <option value="Getters and setters are used to hide variables from the outside world." />
                          <option value="Java doesn't have any special keywords for them." />
                          <option value="To compile a class with private fields, the class must contain at least one getter." />
                          <option value="Setter is just a method getting a value of a field." />
                          <option value="Getter is just a method setting a value of a field. " />
                        </list>
                      </option>
                      <option name="customPresentableName" value="Quiz" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="Select all correct statements about &lt;b&gt;getters&lt;/b&gt; and &lt;b&gt;setters&lt;/b&gt; in Java." />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="5" />
                      <option name="multipleChoice" value="true" />
                      <option name="name" value="Quiz (2)" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294731" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521361803000" />
                    </ChoiceTask>
                    <ChoiceTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="choiceVariants">
                        <list>
                          <option value="getAnotherIntVal" />
                          <option value="readIntVal()" />
                          <option value="getLongVal()" />
                          <option value="getStringVal()" />
                          <option value="isBoolVal()" />
                        </list>
                      </option>
                      <option name="customPresentableName" value="Quiz" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;You have a class &lt;b&gt;AClass &lt;/b&gt;below.&lt;/p&gt;&lt;p&gt;Select all correct &lt;b&gt;getters&lt;/b&gt; in point of view java compiler and common practices.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;public class AClass {&lt;br&gt;&lt;br&gt;    private int intVal;&lt;br&gt;    private boolean boolVal;&lt;br&gt;    private String stringVal;&lt;br&gt;    private Long longVal;&lt;br&gt;    private int anotherIntVal;&lt;br&gt;&lt;br&gt;    public int readIntVal() {&lt;br&gt;        return intVal;&lt;br&gt;    }&lt;br&gt;&lt;br&gt;    public boolean isBoolVal() {&lt;br&gt;        return boolVal;&lt;br&gt;    }&lt;br&gt;&lt;br&gt;    public String getStringVal() {&lt;br&gt;        return stringVal != null ? stringVal : &quot;Unknown&quot;;&lt;br&gt;    }&lt;br&gt;&lt;br&gt;    public Long getLongVal() {&lt;br&gt;        return longVal;&lt;br&gt;    }&lt;br&gt;&lt;br&gt;    public int getAnotherIntVal {&lt;br&gt;        return anotherIntVal;&lt;br&gt;    }&lt;br&gt;}&lt;/code&gt;&lt;/pre&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="6" />
                      <option name="multipleChoice" value="true" />
                      <option name="name" value="Quiz (3)" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294728" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521361802000" />
                    </ChoiceTask>
                  </list>
                </option>
                <option name="unitId" value="54815" />
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="77965" />
                <option name="index" value="5" />
                <option name="name" value="Enum" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="1521361997000" />
                <option name="taskList">
                  <list>
                    <TheoryTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;&lt;b&gt;&lt;/b&gt;Defining new enumeration types&lt;b&gt;&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;An enum type (enumeration) is a special kind of Java class that enables for a variable to be a set of the predefined constant. The variable of an enum type is equal to one of the predefined constants.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;According to the Java Code Convention, constants in an enum are written in uppercase letters.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Here is an example:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;public enum Season {&lt;br&gt;    SPRING, SUMMER, AUTUMN, WINTER&lt;br&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;The keyword &lt;code&gt;enum&lt;/code&gt; is needed to declare a new enum type. Inside the body, all season constants are enumerated.&lt;/p&gt;&lt;p&gt;Here are a few other samples of enums:&lt;br&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Compass directions (NORTH, SOUTH, EAST, WEST);&lt;/li&gt;&lt;li&gt;Days of the week (SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY);&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;Processing enumerations&lt;b&gt;&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Let's initialize several variables of the &lt;code&gt;Season&lt;/code&gt; type:&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Season summer = Season.SUMMER; // SUMMER&#10;Season autumn = Season.AUTUMN; // AUTUMN&lt;/code&gt;&lt;/pre&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;Although an enum is a reference type, two variables can be correctly compared using both ways the method &lt;code&gt;equals&lt;/code&gt; and the operator &lt;code&gt;==&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;System.out.println(summer.equals(Season.SUMMER)); // true&#10;System.out.println(summer == Season.SUMMER); // true&#10;&#10;System.out.println(autumn.equals(Season.AUTUMN)); // true&#10;System.out.println(autumn == Season.AUTUMN); // true&#10;&#10;System.out.println(summer.equals(autumn)); // false&#10;System.out.println(summer == autumn);      // false&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;It's possible to get all enum constants as an array:&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Season[] seasons = Season.values(); // [SPRING, SUMMER, AUTUMN, WINTER]&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Another useful feature is the creation of a variable from a string (&lt;em&gt;&lt;/em&gt;case-sensitivity&lt;em&gt;&lt;/em&gt;) :&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Season season = Season.valueOf(&quot;AUTUMN&quot;); // AUTUMN&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;If the given string doesn't match any constant the &lt;b&gt;IllegalArgumentException&lt;/b&gt; happens.&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Season winter = Season.valueOf(&quot;winter&quot;); // IllegalArgumentException, valueOf is case-sensitive&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Also, it's possible to get the string name of a constant using methods &lt;code&gt;toString&lt;/code&gt; or &lt;code&gt;name&lt;/code&gt;:&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code&gt;String winter = Season.WINTER.name(); // WINTER&#10;String autumn = Season.AUTUMN.toString(); // AUTUMN&#10;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/div&gt;&lt;h2&gt;&lt;b&gt;&lt;/b&gt;Enumerations in the switch statement&lt;/h2&gt;&lt;p&gt;An enum type can be used in the switch statement.&lt;br&gt;&lt;/p&gt;&lt;p&gt;For example, here is an enum with three possible user statuses:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public enum UserStatus {&lt;br&gt;    PENDING, ACTIVE, BLOCKED&lt;br&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Depending on the status, it is possible to perform different logic using the switch statement.&lt;br&gt;&lt;/p&gt;&lt;p&gt;See the example below.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;UserStatus status = ... // some status&#10;&#10;switch (status) {&lt;br&gt;    case PENDING:&lt;br&gt;        System.out.println(&quot;You need to wait a little.&quot;);&lt;br&gt;        break;&lt;br&gt;    case ACTIVE:&lt;br&gt;        System.out.println(&quot;No problems, you may pass here.&quot;);&lt;br&gt;        break;&lt;br&gt;    case BLOCKED:&lt;br&gt;        System.out.println(&quot;Stop! You can't pass here.&quot;);&lt;br&gt;        break;&lt;br&gt;    default:&lt;br&gt;        System.out.println(&quot;Unsupported enum constant.&quot;);&lt;br&gt;} &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Depending on a value of the variable status this code outputs different message.&lt;/p&gt;&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/div&gt;&lt;h2&gt;&lt;b&gt;&lt;/b&gt;Defining fields and methods in enums&lt;b&gt;&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;Enumerated types can include fields and methods.&lt;/p&gt;&lt;p&gt;Let's see an example. In a payment service, there are transactions exist. Each transaction has a status:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;WAITING&lt;/code&gt; - a transaction is created and waits for processing;&lt;/li&gt;&lt;li&gt;&lt;code&gt;PROCESSING&lt;/code&gt; - a transaction is still in processing;&lt;/li&gt;&lt;li&gt;&lt;code&gt;COMPLETED&lt;/code&gt; - a transaction is completed;&lt;/li&gt;&lt;li&gt;&lt;code&gt;ERROR&lt;/code&gt; - an error happens during processing.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Two statuses &lt;code&gt;COMPLETED&lt;/code&gt; and &lt;code&gt;ERROR&lt;/code&gt; are final for a transaction. It's done and won't be processed anymore.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public enum TransactionStatus {&lt;br&gt;    WAITING(false), &#10;    PROCESSING(false), &#10;    COMPLETED(true), &#10;    ERROR(true);&lt;br&gt;    &lt;br&gt;    private boolean done;&lt;br&gt;&lt;br&gt;    TransactionStatus(boolean done) {&lt;br&gt;        this.done = done;&lt;br&gt;    }&lt;br&gt;&lt;br&gt;    public boolean isDone() {&lt;br&gt;        return done;&lt;br&gt;    }&lt;br&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;The enum above has the boolean field &lt;code&gt;done&lt;/code&gt;, a single constructor that takes a boolean variable and the method &lt;code&gt;isDone&lt;/code&gt;. Each enum constant is declared with a boolean value (done or not). The value is passed to the constructor when the constant is created.&lt;div&gt;&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Java requires that the constants be defined first, prior to any fields or methods. Also, when there are fields and methods, the list of enum constants must end with a semicolon.&lt;/p&gt;&lt;div&gt;Let's see the program printing full statuses of all transactions:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class TransactionStatusDemo {&#10;&#10;    public static void main(String[] args) {&#10;&#10;        printFullStatus(TransactionStatus.WAITING);&lt;br&gt;        printFullStatus(TransactionStatus.PROCESSING);&lt;br&gt;        printFullStatus(TransactionStatus.COMPLETED);&lt;br&gt;        printFullStatus(TransactionStatus.ERROR);&lt;br&gt;    }&lt;br&gt;&lt;br&gt;    private static void printFullStatus(TransactionStatus status) {&lt;br&gt;        System.out.println(&quot;Status: &quot; + status + &quot;, is finished: &quot; + status.isDone());&lt;br&gt;    }&lt;br&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The output is:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Status: WAITING, is finished: false&lt;br&gt;Status: PROCESSING, is finished: false&lt;br&gt;Status: COMPLETED, is finished: true&lt;br&gt;Status: ERROR, is finished: true&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;Of course, an enum can contain more than one field. In this case, defining constants looks like:&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;AN_ENUM_CONSTANT(value1, value2, ... valueN)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;And do not forget to write a constructor to initialize them.&lt;/div&gt;&lt;div&gt;&lt;br&gt;You can read about enums in more detail here: &lt;a rel=&quot;nofollow&quot; href=&quot;https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html&quot;&gt;https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html&lt;/a&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="Theory" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294498" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won’t be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521361937000" />
                    </TheoryTask>
                    <ChoiceTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="choiceVariants">
                        <list>
                          <option value="private constructor" />
                          <option value="public constructor" />
                          <option value="public methods" />
                          <option value="predefined constants" />
                        </list>
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="An enum can include ..." />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="2" />
                      <option name="multipleChoice" value="true" />
                      <option name="name" value="Quiz" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294732" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521361937000" />
                    </ChoiceTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;Declare an enum &lt;b&gt;Currency&lt;/b&gt;.&lt;br&gt;&lt;/p&gt;&lt;p&gt;It should include the following currency codes (according to ISO 4217):&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;USD&lt;/b&gt; - United States dollar&lt;/li&gt;&lt;li&gt;&lt;b&gt;EUR&lt;/b&gt; - Euro&lt;/li&gt;&lt;li&gt;&lt;b&gt;GBP&lt;/b&gt; - Pound sterling&lt;/li&gt;&lt;li&gt;&lt;b&gt;RUB&lt;/b&gt; - Russian ruble&lt;/li&gt;&lt;li&gt;&lt;b&gt;UAH&lt;/b&gt; - Ukrainian hryvnia&lt;/li&gt;&lt;li&gt;&lt;b&gt;KZT&lt;/b&gt; - Kazakhstani tenge&lt;/li&gt;&lt;li&gt;&lt;b&gt;CAD&lt;/b&gt; - Canadian dollar&lt;/li&gt;&lt;li&gt;&lt;b&gt;JPY&lt;/b&gt; - Japanese yen&lt;/li&gt;&lt;li&gt;&lt;b&gt;CNY&lt;/b&gt; - Chinese yuan&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;You must include all of the above codes, others do not. The constant in the enum can be declared in any order.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="3" />
                      <option name="name" value="Programming" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294733" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="// declare your enum here" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521361938000" />
                    </CodeTask>
                  </list>
                </option>
                <option name="unitId" value="54816" />
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="77966" />
                <option name="index" value="6" />
                <option name="name" value="Inheritance" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="1521362305000" />
                <option name="taskList">
                  <list>
                    <TheoryTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;&lt;b&gt;&lt;/b&gt;Extending classes&lt;/h2&gt;&lt;p&gt;&lt;b&gt;Inheritance&lt;/b&gt; is a mechanism to derive a new class from another class (base class). The new class acquires some fields and methods of the base class. Inheritance is one of the important principles of the object-oriented programming allowing developers to build convenient class hierarchies and reuse the existing code.&lt;/p&gt;&lt;p&gt;There are several terms. A class that is &lt;b&gt;derived&lt;/b&gt; from another class is called a &lt;b&gt;subclass&lt;/b&gt; (also it's known as a &lt;b&gt;derived class&lt;/b&gt;, &lt;b&gt;extended class&lt;/b&gt; or &lt;b&gt;child class&lt;/b&gt;). The class from which the subclass is derived is called &lt;b&gt;superclass&lt;/b&gt; (also a &lt;b&gt;base class&lt;/b&gt; or a &lt;b&gt;parent class)&lt;/b&gt;.&lt;br&gt;&lt;/p&gt;&lt;p&gt;To derive a new class from another class the keyword &lt;code&gt;extends&lt;/code&gt; is used. The common syntax is shown below.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;class SuperClass { }&lt;br&gt;&lt;br&gt;class SubClassA extends SuperClass { }&#10;&#10;class SubClassB extends SuperClass { }&#10;&#10;class SubClassC extends SubClassA { }&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;/b&gt;Some important points:&lt;b&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Java doesn't support multiple-classes inheritance that means a class can inherit from a single superclass;&lt;/li&gt;&lt;li&gt;a class hierarchy can have multiple levels (class &lt;b&gt;C&lt;/b&gt; can extend class &lt;b&gt;B&lt;/b&gt; that extend class &lt;b&gt;A&lt;/b&gt;);&lt;/li&gt;&lt;li&gt;a superclass can have more than one subclasses.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;A subclass inherits all public and protected fields and methods from the superclass. Also, a subclass can add new fields and methods. The inherited and added members will be used in the same way.&lt;/p&gt;&lt;p&gt;A subclass doesn't inherit private fields and methods from the superclass. However, if the superclass has public or protected methods for accessing its private fields, these members can be used inside the subclasses.&lt;/p&gt;&lt;p&gt;Constructors are not inherited by subclasses, but the superclass's constructor can be invoked from the subclass using the special keyword &lt;code&gt;super&lt;/code&gt;. This keyword is considered in another topic.&lt;/p&gt;&lt;p&gt;If you'd like the base class members will be accessible from all subclasses but not accessible from outside code (excluding the same package), use the access modifier &lt;code&gt;protected&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Inheritance&lt;/b&gt; represents the &lt;b&gt;IS-A&lt;/b&gt; relationship. A base class represents a general thing and subclass represents a particular thing.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;&lt;/b&gt;An example of class hierarchy&lt;b&gt;&lt;/b&gt;&lt;br&gt;&lt;/h2&gt;&lt;p&gt;Let's consider a more useful sample. A telecommunication company serves clients. It has a small staff consisting only of managers and programmers. Here is a class hierarchy for people connected with the company's activities including clients to store them in a database.&lt;/p&gt;&lt;p&gt;At the first, we present the hierarchy in the drawing form. An arrow means one class extends another one.&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://ucarecdn.com/2e3487a9-26c9-486e-a674-a5316073c893/&quot;&gt;&lt;/p&gt;&lt;p class=&quot;wysiwyg-text-align-center&quot;&gt;&lt;b&gt;The class hierarchy for the telecommunication company&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;the base class &lt;code&gt;Person&lt;/code&gt; has fields for storing common data: name, year of birth, and address;&lt;/li&gt;&lt;li&gt;the class &lt;code&gt;Client&lt;/code&gt; has additional fields to store contract number and status (gold or not);&lt;/li&gt;&lt;li&gt;the class &lt;code&gt;Employee&lt;/code&gt; stores the start date of work for the company and salary;&lt;/li&gt;&lt;li&gt;the class &lt;code&gt;Programmer&lt;/code&gt; has an array of the used programming languages;&lt;/li&gt;&lt;li&gt;the class &lt;code&gt;Manager&lt;/code&gt; may have a dazzling smile.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Let's see the code:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;class Person {&#10;    protected String name;&#10;    protected int yearOfBirth;&#10;    protected String address;&#10;&#10;    // public getters and setters for all fields here&#10;}&#10;&#10;class Client extends Person {&#10;    protected String contractNumber;&#10;    protected boolean gold;&#10;&#10;    // public getters and setters for all fields here&#10;}&#10;&#10;class Employee extends Person {&#10;    protected Date startDate;&#10;    protected Long salary;&#10;&#10;    // public getters and setters for all fields here&#10;}&#10;&#10;class Programmer extends Employee {&#10;    protected String[] programmingLanguages;&#10;&#10;    public String[] getProgrammingLanguages() {&lt;br&gt;        return programmingLanguages;&lt;br&gt;    }&lt;br&gt;&lt;br&gt;    public void setProgrammingLanguages(String[] programmingLanguages) {&lt;br&gt;        this.programmingLanguages = programmingLanguages;&lt;br&gt;    }&#10;}&#10;&#10;class Manager extends Employee {&#10;    protected boolean smile;&#10;&#10;    public boolean isSmile() {&lt;br&gt;        return smile;&lt;br&gt;    }&lt;br&gt;&lt;br&gt;    public void setSmile(boolean smile) {&lt;br&gt;        this.smile = smile;&lt;br&gt;    }&#10;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;This hierarchy has two levels and five classes overall. All fields are &lt;code&gt;protected&lt;/code&gt; that means they are visible to subclasses. Also, each class has public getters and setters but some are skipped for short.&lt;/p&gt;&lt;p&gt;Let's create an object of the &lt;code&gt;Programmer&lt;/code&gt; class and fill the inherited fields using the inherited setters. To read values of the fields we can use inherited getters.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Programmer p = new Programmer();&#10;&#10;p.setName(&quot;John Elephant&quot;);&lt;br&gt;p.setYearOfBirth(1985);&lt;br&gt;p.setAddress(&quot;Some street, 15&quot;);&lt;br&gt;p.setStartDate(new Date());&lt;br&gt;p.setSalary(500_000L);&lt;br&gt;p.setProgrammingLanguages(new String[] { &quot;Java&quot;, &quot;Scala&quot;, &quot;Kotlin&quot; });&lt;br&gt;&lt;br&gt;System.out.println(p.getName()); // John Elephant&#10;System.out.println(p.getSalary()); // 500000&#10;System.out.println(Arrays.toString(p.getProgrammingLanguages())); // [Java, Scala, Kotlin]&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;/p&gt;&lt;p&gt;We also can create an instance of any class included in the considered hierarchy.&lt;/p&gt;&lt;p&gt;So,&lt;b&gt; inheritance&lt;/b&gt; provides a powerful mechanism for code reuse and writing convenient hierarchies. Many things of the real world can be simulated like hierarchies from general to particular concept.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;Final classes&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;If the class declared with the keyword &lt;code&gt;final&lt;/code&gt;, it cannot have subclasses.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;final class SuperClass { }&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;If you'll try to extend the class, the compile-time error will happen.&lt;/p&gt;&lt;p&gt;Some standard classes are declared as final: &lt;code&gt;Integer&lt;/code&gt;, &lt;code&gt;Long&lt;/code&gt;, &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;Math&lt;/code&gt;. They cannot be extended.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="Theory" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294499" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won’t be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521362089000" />
                    </TheoryTask>
                    <ChoiceTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="choiceVariants">
                        <list>
                          <option value="protected for fields, private for methods" />
                          <option value="public for fields and methods" />
                          <option value="public for fields, protected for methods" />
                          <option value="protected for fields and methods" />
                          <option value="private for fields and methods" />
                          <option value="private for methods, protected for fields" />
                        </list>
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="Which of the following modifiers do you need to use if class members (fields and methods) should be accessible inside child classes and not accessible in the outside world?&lt;br&gt;&lt;br&gt;You can specify problem settings under the player below." />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="2" />
                      <option name="multipleChoice" value="false" />
                      <option name="name" value="Quiz" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294736" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521362090000" />
                    </ChoiceTask>
                    <ChoiceTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="choiceVariants">
                        <list>
                          <option value="to invoke constructors of the base class" />
                          <option value="to prohibit a class from subclassing" />
                          <option value="to invoke methods of the base class" />
                          <option value="to access fields of the base class" />
                        </list>
                      </option>
                      <option name="customPresentableName" value="Quiz" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="The keywords &lt;code&gt;super&lt;/code&gt; is used ..." />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="3" />
                      <option name="multipleChoice" value="true" />
                      <option name="name" value="Quiz (1)" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294735" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521362090000" />
                    </ChoiceTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;Develop a class hierarchy of employees. The hierarchy should include three classes:&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;Employee&lt;/b&gt; is the base class. It includes three fields (name, email and experience), one constructor with three arguments and three getters: getName(), getEmail(), getExperience().&lt;/li&gt;&lt;li&gt;&lt;b&gt;Developer&lt;/b&gt; is a subclass. It includes fields from the base class and two additional fields (mainLanguage, skills), one constructor with five arguments and two getters: getMainLanguage(), getSkills().&lt;/li&gt;&lt;li&gt;&lt;b&gt;DataAnalyst&lt;/b&gt; is another subclass. It includes fields from the base class and two additional fields (phd, methods), one constructor with five arguments and two getters: isPhD(), getMethods().&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;You need to define types of the fields and write suitable constructors. To understand it see the code below.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;String[] skills = { &quot;git&quot;, &quot;Scala&quot;, &quot;JBoss&quot;, &quot;UML&quot; };&lt;br&gt;Developer developer = new Developer(&quot;Mary&quot;, &quot;mary@mail.com&quot;, 3, &quot;Java&quot;, skills);&lt;br&gt;&lt;br&gt;String[] mlMethods = { &quot;neural networks&quot;, &quot;decision tree&quot;, &quot;bayesian algorithms&quot; };&lt;br&gt;DataAnalyst analyst = new DataAnalyst(&quot;John&quot;, &quot;john@gmail.com&quot;, 2, true, mlMethods);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;It should work correctly with your class hierarchy. Do not forget write getters with the specified name (otherwise the test system won't be able to check your solution).&lt;/p&gt;&lt;p&gt;Do not make your classes &lt;code&gt;public&lt;/code&gt;!&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="4" />
                      <option name="name" value="Programming" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294737" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="class Employee {&#10;&#10;  // write fields&#10;&#10;  // write constructor&#10;&#10;  // write getters&#10;}&#10;&#10;class Developer extends Employee {&#10;&#10;  // write fields&#10;&#10;  // write constructor&#10;&#10;  // write getters&#10;}&#10;&#10;class DataAnalyst extends Employee {&#10;&#10;  // write fields&#10;&#10;  // write constructor&#10;&#10;  // write getters&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521362090000" />
                    </CodeTask>
                    <TheoryTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Theory" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Overriding instance methods&lt;/h2&gt;&lt;p&gt;Java provides an ability to declare a method in a subclass with the same name as a method in the superclass. It's known as &lt;b&gt;method overriding&lt;/b&gt;. The benefit of overriding is that a subclass can give its own specific implementation of a superclass method.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Overriding methods&lt;/b&gt; in subclasses allows a class to inherit from a superclass whose behavior is &lt;b&gt;&quot;close enough&quot; &lt;/b&gt;and then to change this behavior as the subclass needed.&lt;br&gt;&lt;/p&gt;&lt;p&gt;Instance methods can be overridden if they are inherited by the subclass. The overriding method must have the same name, parameters (number and type of parameters), and the return type (or a subclass of the type) as the overridden method.&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Example. &lt;/b&gt;Here&lt;b&gt; &lt;/b&gt;is an examples of overriding.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;class Mammal {&lt;br&gt;&lt;br&gt;    public String sayHello() {&lt;br&gt;        return &quot;ohlllalalalalalaoaoaoa&quot;;&lt;br&gt;    }&lt;br&gt;}&lt;br&gt;&lt;br&gt;class Cat extends Mammal {&lt;br&gt;&lt;br&gt;    @Override&lt;br&gt;    public String sayHello() {&lt;br&gt;        return &quot;meow&quot;;&lt;br&gt;    }&lt;br&gt;}&lt;br&gt;&lt;br&gt;class Human extends Mammal {&lt;br&gt;&lt;br&gt;    @Override&lt;br&gt;    public String sayHello() {&lt;br&gt;        return &quot;hello&quot;;&lt;br&gt;    }&lt;br&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;The hierarchy includes three classes: &lt;code&gt;Mammal&lt;/code&gt;, &lt;code&gt;Cat&lt;/code&gt; and &lt;code&gt;Human&lt;/code&gt;. The class &lt;code&gt;Mammal&lt;/code&gt; has the method &lt;code&gt;sayHello&lt;/code&gt;. Each subclass overrides the method. The &lt;code&gt;@Override&lt;/code&gt; annotation indicates the method is overridden. It is optional but helpful.&lt;/p&gt;&lt;p&gt;Let's create instances and invoke the method.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Mammal mammal = new Mammal();&#10;System.out.println(mammal.sayHello()); // it prints &quot;ohlllalalalalalaoaoaoa&quot;&#10;&#10;Cat cat = new Cat();&#10;System.out.println(cat.sayHello()); // it prints &quot;meow&quot;&#10;&#10;Human human = new Human();&#10;System.out.println(human.sayHello()); // it prints &quot;hello&quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;As you can see, each subclass has its own implementation of the method &lt;code&gt;sayHello&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; you can invoke the base class method in the overridden method using the keyword &lt;code&gt;super&lt;/code&gt;.&lt;/p&gt;&lt;h2&gt;Rules for overriding methods&lt;/h2&gt;&lt;p&gt;There are several rules for methods of subclasses which should override methods of a superclass:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;the method must have the same name as in the superclass;&lt;/li&gt;&lt;li&gt;the arguments should be exactly the same as in the superclass method;&lt;/li&gt;&lt;li&gt;the return type should be the same or a subtype of the return type declared in the method of the superclass;&lt;/li&gt;&lt;li&gt;the access level must be the same or more open than the overridden method's access level;&lt;/li&gt;&lt;li&gt;&lt;b&gt;&lt;/b&gt;a private method cannot be overridden&lt;b&gt;&lt;/b&gt; because it's not inherited by subclasses;&lt;/li&gt;&lt;li&gt;if the superclass and its subclass are in the same package, then package-private methods can be overridden;&lt;/li&gt;&lt;li&gt;&lt;b&gt;&lt;/b&gt;static methods cannot be overridden&lt;b&gt;&lt;/b&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;To verify these rules, here is a special annotation &lt;b&gt;@Override&lt;/b&gt;. It allows you to know whether a method will be actually &lt;b&gt;overridden&lt;/b&gt; or no. If for some reason, the compiler decides the method cannot be overridden, it will generate an error. But, remember, the annotation is not required, it's only for convenience.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;Forbidding overriding&lt;/h2&gt;&lt;p&gt;If you'd like to forbid an overriding of a method, declare it with the keyword &lt;b&gt;final&lt;/b&gt;.&lt;br&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public final void method() {&#10;    // do something&#10;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Now, If you try to override this method in a subclass, a compile-time error happens.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;Overriding and overloading methods together&lt;/h2&gt;&lt;p&gt;It's possible to override and overload an instance method in a subclass at the same time. Overloaded methods do not override superclass instance methods. They are new methods, unique to the subclass.&lt;br&gt;&lt;/p&gt;&lt;p&gt;The following example demonstrates it.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;class SuperClass {&#10;&#10;    public void invokeInstanceMethod() {&#10;        System.out.println(&quot;SuperClass: invokeInstanceMethod&quot;);&#10;    }&#10;}&#10;&#10;class SubClass extends SuperClass {&#10;&#10;    @Override&lt;br&gt;    public void invokeInstanceMethod() {&#10;        System.out.println(&quot;SubClass: invokeInstanceMethod is overridden&quot;);&#10;    }&#10;    &#10;    // @Override -- method doesn't override anything&#10;    public void invokeInstanceMethod(String s) {&#10;        System.out.println(&quot;SubClass: overloaded invokeInstanceMethod&quot;);&#10;    }&#10;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;The following code creates an instance and calls both methods:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;SubClass clazz = new SubClass();&#10;&#10;clazz.invokeInstanceMethod();    // SubClass: invokeInstanceMethod() is overridden&#10;clazz.invokeInstanceMethod(&quot;s&quot;); // SubClass: overloaded invokeInstanceMethod(String)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Remember, overriding and overloading are different mechanisms but you can mix them together in one class hierarchy.&lt;/p&gt;&lt;h2&gt;Hiding static methods&lt;/h2&gt;&lt;p&gt;Static methods cannot be overridden. If a subclass has a static method with the same signature (name and parameters) as a static method in the superclass then the method in the subclass hides the one in the superclass. It's completely different from methods overriding.&lt;/p&gt;&lt;p&gt;You will get a compile-time error if a subclass has a static method with the same signature as an instance method in the superclass or vice versa. But if the methods have the same name but different parameters there are no problems.&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="5" />
                      <option name="name" value="Theory (1)" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294738" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won’t be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521362245000" />
                    </TheoryTask>
                    <ChoiceTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="choiceVariants">
                        <list>
                          <option value="A method in subclass must have the annotation @Override." />
                          <option value="A method in subclass must have the same returning type or a subclass of the returning type." />
                          <option value="A method in super class must have the keyword &quot;protected&quot;." />
                          <option value="A method in subclass must have the same name as a method in base class." />
                          <option value="A method in subclass must have not less access modifier as a method in base class." />
                          <option value="A method in subclass must have the same argument list as a method in base class." />
                        </list>
                      </option>
                      <option name="customPresentableName" value="Quiz" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="Select all conditions necessary to override a base class method in a subclass." />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="6" />
                      <option name="multipleChoice" value="true" />
                      <option name="name" value="Quiz (2)" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294739" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521362245000" />
                    </ChoiceTask>
                    <ChoiceTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="choiceVariants">
                        <list>
                          <option value="staticMethod" />
                          <option value="method2" />
                          <option value="method3" />
                          <option value="method1" />
                        </list>
                      </option>
                      <option name="customPresentableName" value="Quiz" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;Which of the following methods will be overridden in SubClass?&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;class SuperClass {&lt;br&gt;&lt;br&gt;    public static void staticMethod(int i) { }&lt;br&gt;&lt;br&gt;    public void method1(int i) { }&lt;br&gt;&lt;br&gt;    public void method2(int i, String s) { }&lt;br&gt;    &lt;br&gt;    private void method3(int i) { }&lt;br&gt;}&lt;br&gt;&lt;br&gt;class SubClass extends SuperClass {&lt;br&gt;&lt;br&gt;    public static void staticMethod(int i) { }&lt;br&gt;    &lt;br&gt;    public void method1(int i) { }&lt;br&gt;&lt;br&gt;    public void method2(String s) { }&lt;br&gt;    &lt;br&gt;    public void method3(int i) { }&lt;br&gt;}&lt;/code&gt;&lt;/pre&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="7" />
                      <option name="multipleChoice" value="true" />
                      <option name="name" value="Quiz (3)" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294741" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521362245000" />
                    </ChoiceTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;You have four classes: Animal, Cat, Dog and Duck. The class animal has a method say(). The method do nothing.&lt;br&gt;&lt;/p&gt;&lt;p&gt;Override the method in all subclasses. Overridden methods should output what these animals say (using System.out.println).&lt;/p&gt;&lt;p&gt;Cat:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;meow-meow&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Dog:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;arf-arf&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Duck:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;quack-quack&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="8" />
                      <option name="name" value="Programming (1)" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294740" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="class Animal {&#10;&#10;  public void say() {}&#10;}&#10;&#10;class Cat extends Animal {&#10;&#10;}&#10;&#10;class Dog extends Animal {&#10;&#10;}&#10;&#10;class Duck extends Animal {&#10;&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521362245000" />
                    </CodeTask>
                  </list>
                </option>
                <option name="unitId" value="54817" />
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="77967" />
                <option name="index" value="7" />
                <option name="name" value="Polymorphism" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="1521362480000" />
                <option name="taskList">
                  <list>
                    <TheoryTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Kinds of polymorphism&lt;br&gt;&lt;/h2&gt;&lt;p&gt;In the general case, polymorphism means that something (an object or another entity) has many forms.&lt;/p&gt;&lt;p&gt;Java provides two types of polymorphism: &lt;b&gt;static (compile-time)&lt;/b&gt; and dynamic &lt;b&gt;(run-time) polymorphism&lt;/b&gt;. The first one is achieved by &lt;b&gt;method overloading&lt;/b&gt;, the second one based on inheritance and &lt;b&gt;method overriding&lt;/b&gt;.&lt;/p&gt;&lt;p&gt;The more theoretical approach subdivides polymorphism into several fundamentally different types:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;Ad-hoc polymorphism&lt;/b&gt; refers to polymorphic functions that can be applied to arguments of different types, but that behave differently depending on the type of the argument to which they are applied. Java supports it as &lt;b&gt;method overloading&lt;/b&gt;.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Subtype polymorphism&lt;/b&gt; (also known as subtyping) is a possibility to use an instance of a subclass when an instance of the base class is permitted.&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;Parametric polymorphism:&lt;/b&gt; when a code is written without mention of any specific type and thus can be used transparently with any number of new types. Java supports it as &lt;b&gt;generics&lt;/b&gt; or &lt;b&gt;generic programming&lt;/b&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;In this topic, we'll consider only &lt;b&gt;run-time polymorphism&lt;/b&gt; that is widely used in the object-oriented programming.&lt;br&gt;&lt;/p&gt;&lt;h2&gt;Runtime polymorphic behavior&lt;br&gt;&lt;/h2&gt;&lt;p&gt;We remind you, method overriding it is when a subclass redefines a method of the superclass with the same name.&lt;br&gt;&lt;/p&gt;&lt;p&gt;The run-time polymorphism relies on two principles:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;a reference variable of a superclass can refer to any subtype objects;&lt;/li&gt;&lt;li&gt;a superclass method can be overridden in a subclass.&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;It works when an overridden method is calling through the reference variable of a superclass.&lt;b&gt; &lt;/b&gt;Java determines at runtime which version (superclass/subclasses) of the method is to be executed based on the type of the object being referred, not the type of reference. It uses the mechanism known as &lt;b&gt;dynamic method dispatching&lt;/b&gt;.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Example. &lt;/b&gt;Here, a class hierarchy is presented. The superclass &lt;code&gt;MythicalAnimal&lt;/code&gt; has two subclasses: &lt;code&gt;Chimera&lt;/code&gt; and &lt;code&gt;Dragon&lt;/code&gt;. The base class has the method &lt;code&gt;hello&lt;/code&gt;. Both subclasses override the method.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;class MythicalAnimal {    &#10;&#10;    public void hello() {&lt;br&gt;        System.out.println(&quot;Hello, I'm an unknown animal&quot;);&lt;br&gt;    }&lt;br&gt;}&lt;br&gt;&lt;br&gt;class Chimera extends MythicalAnimal {&lt;br&gt;&lt;br&gt;    public void hello() {&lt;br&gt;        System.out.println(&quot;Hello! Hello!&quot;);&lt;br&gt;    }&lt;br&gt;}&lt;br&gt;&lt;br&gt;class Dragon extends MythicalAnimal {&lt;br&gt;&lt;br&gt;    public void hello() {&lt;br&gt;        System.out.println(&quot;Rrrr...&quot;);&lt;br&gt;    }&lt;br&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;We can create references to the class &lt;code&gt;MythicalAnimal&lt;/code&gt; and assign it to subclass objects.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;MythicalAnimal chimera = new Chimera();&lt;br&gt;MythicalAnimal dragon = new Dragon();&lt;br&gt;MythicalAnimal animal = new MythicalAnimal();&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;And invoke overridden methods through the base class references:&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;animal.hello(); // Hello, i'm an unknown animal&#10;chimera.hello(); // Hello! Hello!&#10;dragon.hello(); // Rrrr...&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;So, the result of a method call depends on the actual type of an instance, not a reference. It's a polymorphic feature in Java. The JVM calls the appropriate method for the object that is referred to in each variable.&lt;/p&gt;&lt;p&gt;It allows a class to specify methods that will be common to all of its subclasses while allowing subclasses to define the specific implementation of some or all of those methods. It's very useful for object-oriented design, especially, together with abstract methods and interfaces which are studying in other topics.&lt;/p&gt;&lt;div&gt;&lt;h2&gt;Polymorphism within a class hierarchy&lt;/h2&gt;&lt;div&gt;The same thing works with methods that are used only within a hierarchy and not accessible from outside.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Example. &lt;/b&gt;There is a hierarchy&lt;b&gt; &lt;/b&gt;of files. The parent class &lt;code&gt;File&lt;/code&gt; represents a description of a single file in the file system. It has a subclass named &lt;code&gt;ImageFile&lt;/code&gt;.  It overrides the method &lt;code&gt;getFileInfo&lt;/code&gt; of the parent class.&lt;/div&gt;&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;class File {&#10;&#10;    protected String fullName;&#10;&#10;    // constructor with a single paratemer&#10;&#10;    // getters and setters&#10;&#10;    public void printFileInfo() {&#10;        String info = this.getFileInfo(); // here is polymorphic behaviour!!!&#10;        System.out.println(info);&#10;    }&#10;&#10;    protected String getFileInfo() {&#10;        return &quot;File: &quot; + fullName;&#10;    }&#10;}&#10;&#10;class ImageFile extends File {&#10;&#10;    protected int width;&#10;    protected int height;&#10;    protected byte[] content;&#10;&#10;    // constructor&#10;&#10;    // getters and setters&#10;&#10;    @Override&#10;    protected String getFileInfo() {&#10;        return String.format(&quot;Image: %s, width: %d, height: %d&quot;, fullName, height, width); &#10;    }&#10;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;The parent class has the public method printFileInfo and the protected method &lt;code&gt;getFileInfo&lt;/code&gt;. The second method is overridden in the subclass, but the subclass doesn't override the first method.&lt;/p&gt;&lt;p&gt;Let's create an instance of &lt;code&gt;ImageFile&lt;/code&gt; and assign it to the variable of &lt;code&gt;File&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;File img = new ImageFile(&quot;/path/to/file/img.png&quot;, 640, 480, someBytes); // assigning an object&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Now, when we call the method &lt;code&gt;printFileInfo&lt;/code&gt;, it invokes the overridden version of the method &lt;code&gt;getFileInfo&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;img.printFileInfo(); // It prints &quot;Image: /path/to/file/img.png, width: 480, height: 640&quot;&lt;/code&gt;&lt;/pre&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;So, &lt;b&gt;run-time polymorphism&lt;/b&gt; allows you to invoke an instance overridden method of a subclass having a reference to a base class.&lt;/div&gt;&lt;/div&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="Theory" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294500" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won’t be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521362416000" />
                    </TheoryTask>
                    <ChoiceTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="choiceVariants">
                        <list>
                          <option value="Compile-time polymorphism" />
                          <option value="Data abstraction" />
                          <option value="Magic" />
                          <option value="Encapsulation" />
                          <option value="Extending methods" />
                          <option value="Run-time polymorphism" />
                          <option value="Inheritance" />
                        </list>
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="Invoking a subclass method by calling the superclass method with the same name is a kind of ..." />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="2" />
                      <option name="multipleChoice" value="false" />
                      <option name="name" value="Quiz" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294743" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521362416000" />
                    </ChoiceTask>
                    <ChoiceTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="choiceVariants">
                        <list>
                          <option value="Method overriding is a kind of static polymorphism" />
                          <option value="Method overloading is a kind of static polymorphism" />
                          <option value="Method overriding is a kind of dynamic polymorphism" />
                          <option value="Method overloading is a kind of dynamic polymorphism" />
                        </list>
                      </option>
                      <option name="customPresentableName" value="Quiz" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="Select all correct statements." />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="3" />
                      <option name="multipleChoice" value="true" />
                      <option name="name" value="Quiz (1)" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294744" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521362416000" />
                    </ChoiceTask>
                    <ChoiceTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="choiceVariants">
                        <list>
                          <option value="Declaring generic types" />
                          <option value="Type casting" />
                          <option value="Dynamic method dispatch" />
                          <option value="Inheritance" />
                          <option value="Static polymorphism" />
                        </list>
                      </option>
                      <option name="customPresentableName" value="Quiz" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="... is a mechanism by which a call to an overridden method is resolved at runtime." />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="4" />
                      <option name="multipleChoice" value="false" />
                      <option name="name" value="Quiz (2)" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294745" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521362416000" />
                    </ChoiceTask>
                    <ChoiceTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="choiceVariants">
                        <list>
                          <option value="It outputs one line &quot;Derived class&quot;." />
                          <option value="It outputs one line &quot;Base class&quot;." />
                          <option value="It outputs two lines. The first one is &quot;Derived class&quot;. The second one is &quot;Base class&quot;." />
                          <option value="It outputs two lines. The first one is &quot;Base class&quot;. The second one is &quot;Derived class&quot;." />
                        </list>
                      </option>
                      <option name="customPresentableName" value="Quiz" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;You have an inheritance hierarchy consisting of two classes.&lt;br&gt;&lt;/p&gt;&lt;p&gt;The base class.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;public class BaseClass {&lt;br&gt;&lt;br&gt;    public void print() {&lt;br&gt;        System.out.println(&quot;Base class&quot;);&lt;br&gt;    }&lt;br&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;The derived class.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;public class DerivedClass extends BaseClass {&lt;br&gt;&lt;br&gt;    public void print() {&lt;br&gt;        System.out.println(&quot;Derived class&quot;);&lt;br&gt;        super.print();&lt;br&gt;    }&lt;br&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;What is the output of the code below?&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;BaseClass clazz = new DerivedClass();&lt;br&gt;clazz.print();&lt;/code&gt;&lt;/pre&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="5" />
                      <option name="multipleChoice" value="false" />
                      <option name="name" value="Quiz (3)" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294742" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521362416000" />
                    </ChoiceTask>
                  </list>
                </option>
                <option name="unitId" value="54818" />
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="77968" />
                <option name="index" value="8" />
                <option name="name" value="Abstract class" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="1521362687000" />
                <option name="taskList">
                  <list>
                    <TheoryTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;An abstract class is a class declared with the keyword &lt;b&gt;abstract&lt;/b&gt;. It represents an abstract concept that is used as a base class for subclasses.&lt;br&gt;&lt;/p&gt;&lt;p&gt;An abstract class has some features:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;it's impossible to create an instance of an abstract class;&lt;/li&gt;&lt;li&gt;it can contain abstract methods which must be implemented in non-abstract subclasses;&lt;/li&gt;&lt;li&gt;it also can contain fields and non-abstract methods (including static);&lt;/li&gt;&lt;li&gt;an abstract class can extend another class, including abstract;&lt;/li&gt;&lt;li&gt;it can contain a constructor.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;As you can see, an abstract class has two main differences from regular (concrete) classes: no instances and abstract methods.&lt;/p&gt;&lt;p&gt;Abstract methods are declared by adding the keyword &lt;b&gt;abstract&lt;/b&gt;. They have a declaration (modifiers, a return type, and a signature) but don't have an implementation. Each concrete (non-abstract) subclass must implement these methods.&lt;/p&gt;&lt;p&gt;Note, static methods can't be abstract.&lt;/p&gt;&lt;p&gt;Let's see an example. Here is an abstract class Pet:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public abstract class Pet {&lt;br&gt;&lt;br&gt;    protected String name;&lt;br&gt;    protected int age;&lt;br&gt;&lt;br&gt;    protected Pet(String name, int age) {&lt;br&gt;        this.name = name;&lt;br&gt;        this.age = age;&lt;br&gt;    }&lt;br&gt;&lt;br&gt;    public abstract void say(); // an abstract method&lt;br&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;The class has two fields, a constructor, and an abstract method.&lt;/p&gt;&lt;p&gt;It's impossible to create instances of this class:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Pet pet = new Pet(&quot;Unnamed&quot;, 5); // impossible&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;The method say() is declared abstract because, at this level of abstract, an implementation is not known. Concrete subclasses of the class must implement this method.&lt;/p&gt;&lt;p&gt;Here are two concrete subclasses of Pet, they override the abstract method:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;class Cat extends Pet {&#10;&#10;    // It can have additional fields as well&#10;&#10;    public Cat(String name, int age) {&#10;        super(name, age);&#10;    }&#10;&#10;    @Override&#10;    public void say() {&#10;        System.out.println(&quot;Meow!&quot;);&#10;    }&#10;}&#10;&#10;class Dog extends Pet {&#10;&#10;    // It can have additional fields as well&#10;&#10;    public Dog(String name, int age) {&#10;        super(name, age);&#10;    }&lt;br&gt;&lt;br&gt;    @Override&#10;    public void say() {&#10;        System.out.println(&quot;Wuf!&quot;);&#10;    }&#10;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;We can create instances of these classes and call the method say().&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Dog dog = new Dog(&quot;Boss&quot;, 5);&#10;Cat cat = new Cat(&quot;Tiger&quot;, 2);&#10;        &#10;dog.say(); // it prints &quot;Wuf!&quot;&#10;cat.say(); // it prints &quot;Meow!&quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Do not forget, Java doesn't support multiple inheritances for classes. Therefore, a class can extend only one abstract class.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="Theory" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294501" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won’t be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521362626000" />
                    </TheoryTask>
                    <ChoiceTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="choiceVariants">
                        <list>
                          <option value="A class can extends only one abstract class." />
                          <option value="An abstract class can't have default methods." />
                          <option value="It's impossible to create an instance of abstract class." />
                          <option value="Non-abstract classes can't contain abstract methods." />
                          <option value="By default, all methods in abstract class have access modifier &quot;public&quot;." />
                        </list>
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="Choose an incorrect statement about&lt;b&gt; abstract classes and methods.&lt;/b&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="2" />
                      <option name="multipleChoice" value="false" />
                      <option name="name" value="Quiz" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294749" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521362626000" />
                    </ChoiceTask>
                    <ChoiceTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="choiceVariants">
                        <list>
                          <option value="A class that implements an interface must implement all the methods declared in the interface." />
                          <option value="It's impossible to create an instance of an interface." />
                          <option value="A class can implement multiple interfaces." />
                          <option value="An interface can contain abstract, default and static methods." />
                          <option value="Interface can have methods with access modifier &quot;protected&quot;." />
                        </list>
                      </option>
                      <option name="customPresentableName" value="Quiz" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="Choose an &lt;b&gt;incorrect&lt;/b&gt; statement about &lt;b&gt;interfaces&lt;/b&gt;." />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="3" />
                      <option name="multipleChoice" value="false" />
                      <option name="name" value="Quiz (1)" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294746" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521362626000" />
                    </ChoiceTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;You have the abstract class &lt;b&gt;Shape&lt;/b&gt; with two abstract methods: getPerimeter() and getArea(). See the provided code template.&lt;br&gt;&lt;/p&gt;&lt;p&gt;You need to declare and implement three classes: &lt;b&gt;Triangle&lt;/b&gt;, &lt;b&gt;Rectangle&lt;/b&gt; and &lt;b&gt;Circle&lt;/b&gt;. The classes must extend the Shape class and implement all abstract methods. To implement the methods the standard class Math may help you. Do not make your classes public.&lt;/p&gt;&lt;p&gt;The class Triangle must have a constructor with three double arguments for setting the length of each side. To calculate the area of this shape you may use the Heron's formula.&lt;/p&gt;&lt;p&gt;The class Rectangle must have a constructor with two double arguments for setting the length of different sides.&lt;/p&gt;&lt;p&gt;The class Circle must have a constructor with one double argument for setting the radius. You may use Math.PI as the PI constant or declare it yourself.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Examples&lt;/b&gt;&lt;/p&gt;&lt;p&gt;A circle has a radius = 10: perimeter = 62.831853..., area = 314.159265....&lt;/p&gt;&lt;p&gt;A triangle has three sides a = 3, b = 4 and c = 5: perimeter = 12.0, area = 6.0.&lt;/p&gt;&lt;p&gt;A rectangle has two different sides a = 5, b = 10: perimeter = 30.0, area = 50.0.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="4" />
                      <option name="name" value="Programming" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294748" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="abstract class Shape {&#10;&#10;  abstract double getPerimeter();&#10;&#10;  abstract double getArea();&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521362626000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;Given an interface named &lt;code&gt;AccountService&lt;/code&gt;. The interface has two abstract methods:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;findAccountByOwnerId(long id)&lt;/code&gt; returns &lt;code&gt;Account&lt;/code&gt; found by owner id or &lt;code&gt;null&lt;/code&gt;.&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;countAccountsWithBalanceGreaterThan(long balance)&lt;/code&gt; returns number of accounts with the balance greater than the passed value.&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Also there are two another classes: &lt;code&gt;Account&lt;/code&gt; (id, balance, owner) and &lt;code&gt;User&lt;/code&gt; (id, firstName, lastName). See the provided code template.&lt;/p&gt;&lt;p&gt;You need to implement the &lt;code&gt;AccountService&lt;/code&gt; interface and its two methods. Your implementation must be named &lt;code&gt;AccountServiceImpl&lt;/code&gt;. It should have a constructor with one argument - an array of accounts. The implementation must keep the array inside. The first method should search an account by owner id in the array, the second one - count number of accounts by condition in the array.&lt;/p&gt;&lt;p&gt;An example of creating an instance:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Account[] accounts = ...&lt;br&gt;AccountService service = new AccountServiceImpl(accounts);&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Do not make classes and the interface &lt;code&gt;public&lt;/code&gt;.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="5" />
                      <option name="name" value="Programming (1)" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294747" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="interface AccountService {&#10;  /**&#10;   * It finds an account by owner id&#10;   * @param id owner unique identifier&#10;   * @return account or null&#10;   */&#10;  Account findAccountByOwnerId(long id);&#10;  /**&#10;   * It count the number of account with balance &gt; the given value&#10;   * @param value&#10;   * @return the number of accounts&#10;   */&#10;  long countAccountsWithBalanceGreaterThan(long value);&#10;}&#10;&#10;// Declare and implement your AccountServiceImpl here&#10;&#10;class Account {&#10;&#10;  private long id;&#10;  private long balance;&#10;  private User owner;&#10;&#10;  public Account(long id, long balance, User owner) {&#10;    this.id = id;&#10;    this.balance = balance;&#10;    this.owner = owner;&#10;  }&#10;&#10;  public long getId() { return id; }&#10;&#10;  public long getBalance() { return balance; }&#10;&#10;  public User getOwner() { return owner; }&#10;}&#10;&#10;class User {&#10;&#10;  private long id;&#10;  private String firstName;&#10;  private String lastName;&#10;&#10;  public User(long id, String firstName, String lastName) {&#10;    this.id = id;&#10;    this.firstName = firstName;&#10;    this.lastName = lastName;&#10;  }&#10;&#10;  public long getId() { return id; }&#10;&#10;  public String getFirstName() { return firstName; }&#10;&#10;  public String getLastName() { return lastName; }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521362626000" />
                    </CodeTask>
                  </list>
                </option>
                <option name="unitId" value="54819" />
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="77970" />
                <option name="index" value="9" />
                <option name="name" value="The Object class" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="1521363011000" />
                <option name="taskList">
                  <list>
                    <TheoryTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;The root class in Java&lt;/h2&gt;&lt;p&gt;The Java Standard Library has a class named &lt;code&gt;Object&lt;/code&gt; that is the parent of all standard and your classes by default. Any class extends this class implicitly, therefore it's a root of inheritance in Java programs.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;The class belongs to the &lt;code&gt;java.lang&lt;/code&gt; package that is imported by default.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Let's create an instance of the &lt;code&gt;Object&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Object anObject = new Object();&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;The &lt;code&gt;Object&lt;/code&gt; class can refer an instance of any class because the instance is a kind of &lt;code&gt;Object&lt;/code&gt; as well (upcasting).&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Long number = 1_000_000L;&lt;br&gt;Object obj1 = number; // an instance of Long can be cast to Object&lt;br&gt;&#10;String str = &quot;str&quot;;&lt;br&gt;Object obj2 = str; // as well as an instance of String&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;When we declare a class, we can extend the &lt;code&gt;Object&lt;/code&gt; class in the explicit form.&lt;/p&gt;&lt;p&gt;Here is an example, do not repeat it:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;class A extends Object { }&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;Methods provided by the Object class&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;The &lt;code&gt;Object&lt;/code&gt; class provides some common methods to all subclasses. It has nine instance methods (excluding overloaded methods) which can be divided into four groups:&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;threads synchronization: &lt;i&gt;wait&lt;/i&gt;, &lt;i&gt;notify&lt;/i&gt;, &lt;i&gt;notifyAl&lt;/i&gt;&lt;i&gt;l&lt;/i&gt;;&lt;/li&gt;&lt;li&gt;object identity: &lt;i&gt;hashCode&lt;/i&gt;, &lt;i&gt;equals&lt;/i&gt;;&lt;/li&gt;&lt;li&gt;object management: &lt;i&gt;finalize, clone, getClass;&lt;/i&gt;&lt;i&gt;&lt;/i&gt;&lt;/li&gt;&lt;li&gt;human-readable representation: &lt;i&gt;toString&lt;/i&gt;;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Of course, this way to group methods does not pretend to be ideal, but it can help you to remember them.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The first group of methods (&lt;i&gt;wait&lt;/i&gt;, &lt;i&gt;notify&lt;/i&gt;, &lt;i&gt;notifyAl&lt;/i&gt;&lt;i&gt;l)&lt;/i&gt; are for working in multithreaded applications.&lt;br&gt;&lt;/li&gt;&lt;li&gt;The method &lt;i&gt;hashCode&lt;/i&gt; returns a hash code value for the object.&lt;br&gt;&lt;/li&gt;&lt;li&gt;The method &lt;i&gt;equals &lt;/i&gt;indicates whether some other object is &lt;b&gt;&quot;equal to&quot;&lt;/b&gt; this one.&lt;/li&gt;&lt;li&gt;The method &lt;i&gt;finalize&lt;/i&gt; is called by the garbage collector (GC) on an object when GC want to clean up it.&lt;/li&gt;&lt;li&gt;The method &lt;i&gt;clone&lt;/i&gt; creates and returns a copy of the object.&lt;/li&gt;&lt;li&gt;The method &lt;i&gt;getClass&lt;/i&gt; returns an instance of Class, which has information about the runtime class.&lt;/li&gt;&lt;li&gt;The method &lt;i&gt;toString&lt;/i&gt; returns a string representation of the object.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Some of the listed methods are native that means they are implemented in &lt;b&gt;&quot;native&lt;/b&gt;&quot; code. It's typically written in C or C++. Native methods are usually used to interface with system calls or libraries written in other programming languages.&lt;/p&gt;&lt;div&gt;In the following topics, we will consider methods of the class in details.&lt;/div&gt;&lt;p&gt;&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="Theory" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294503" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won’t be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521362946000" />
                    </TheoryTask>
                    <ChoiceTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="choiceVariants">
                        <list>
                          <option value="Your custom classes does not inherit &lt;b&gt;Object&lt;/b&gt;." />
                          <option value="The class is the root of the class hierarchy in Java." />
                          <option value="It's impossible to create an instance of the &lt;b&gt;Object&lt;/b&gt; class." />
                          <option value="All objects including arrays have methods of this class." />
                        </list>
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="Select all true statements about the &lt;code&gt;Object&lt;/code&gt; class." />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="2" />
                      <option name="multipleChoice" value="true" />
                      <option name="name" value="Quiz" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294752" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521362946000" />
                    </ChoiceTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;There is a class named Account. It includes three fields: &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;code&lt;/code&gt; and &lt;code&gt;balance&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;&lt;p&gt;Override the method &lt;code&gt;toString()&lt;/code&gt; in this class. The method should return a string representation of the account instance.&lt;/p&gt;&lt;p&gt;Use the provided template. Do not make the class &lt;code&gt;public&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Example&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Account{id=10, code='123-456-789', balance=2000}&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="3" />
                      <option name="name" value="Programming" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294751" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="class Account {&#10;&#10;  private long id;&#10;  private String code;&#10;  private Long balance;&#10;&#10;  public Account(long id, String code, Long balance) {&#10;    this.id = id;&#10;    this.code = code;&#10;    this.balance = balance;&#10;  }&#10;&#10;  // Override toString() here&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521362946000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;Given the class&lt;code&gt;ComplexNumber&lt;/code&gt;. Override its methods &lt;code&gt;equals()&lt;/code&gt; and &lt;code&gt;hashCode()&lt;/code&gt;. The method &lt;code&gt;equals()&lt;/code&gt; should compare two instances of &lt;code&gt;ComplexNumber&lt;/code&gt; by the fields &lt;code&gt;re&lt;/code&gt; and &lt;code&gt;im&lt;/code&gt;. The method &lt;code&gt;hashCode()&lt;/code&gt; must be consistent with your implementation of &lt;code&gt;equals()&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;&lt;p&gt;Implementation of the method &lt;code&gt;hashCode()&lt;/code&gt; returning a constant or not considering a fractional part of &lt;code&gt;re&lt;/code&gt; and &lt;code&gt;im&lt;/code&gt;, will not be accepted.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Example&lt;/b&gt;&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;ComplexNumber a = new ComplexNumber(1, 1);&#10;ComplexNumber b = new ComplexNumber(1, 1);&#10;// a.equals(b) must return true&#10;// a.hashCode() must be equal to b.hashCode()&#10;&lt;/code&gt;&lt;/pre&gt; &lt;br&gt;&lt;b&gt;Hint 1. &lt;/b&gt;Find a static method in the class java.lang.Double that will help in solving this quiz.&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Hint 2.&lt;/b&gt; If you can't solve this quiz anyway, you can use a modern IDE (such as Intellij Idea) for automatically generating correct equals() and hashCode(). But in this case, you need to understand what is generated and why it works.&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="4" />
                      <option name="name" value="Programming (1)" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294753" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/ComplexNumber.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/ComplexNumber.java" />
                                <option name="text" value="public final class ComplexNumber {&#10;  private final double re;&#10;  private final double im;&#10;&#10;  public ComplexNumber(double re, double im) {&#10;    this.re = re;&#10;    this.im = im;&#10;  }&#10;&#10;  public double getRe() {&#10;    return re;&#10;  }&#10;&#10;  public double getIm() {&#10;    return im;&#10;  }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521362946000" />
                    </CodeTask>
                    <TheoryTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Theory" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;&lt;b&gt;&lt;/b&gt;What is an anonymous class?&lt;/h2&gt;&lt;div&gt;Sometimes developers need to use a small class which overrides some methods of another class or interface only once. In this case, declaring a new class may be superfluous. Fortunately, Java provides a mechanism to declare and instantiate a class in a single statement without declaring a new named class. Such classes are called &lt;b&gt;anonymous&lt;/b&gt; because they don't have name identifiers like String or MyClass (but they have an internal name).&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;h2&gt;&lt;b&gt;&lt;/b&gt;Writing anonymous classes&lt;/h2&gt;&lt;div&gt;An anonymous class always implement an interface or extends a class (concrete or abstract). Here is a common syntax to create an anonymous class:&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;new SuperClassOrInterfaceName() {&#10;&#10;    // fields&#10;&#10;    // overridden methods&#10;};&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The syntax of an anonymous class is similar to a constructor call, except that there is a class definition contained in a block of code.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Important:&lt;/b&gt; an anonymous class must override all abstract methods of the superclass. That is, all interface methods must be overridden. If an anonymous extends a class that has no any abstract methods, it has the right, not to override anything.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Example. &lt;/b&gt;Let's assume we have the following interface with two methods:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;interface SpeakingEntity {&lt;br&gt;&lt;br&gt;    void sayHello();&lt;br&gt;&lt;br&gt;    void sayBye();&lt;br&gt;}&lt;/code&gt;&lt;/pre&gt; &lt;br&gt;Here is an anonymous class that represents an English-speaking person:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;SpeakingEntity englishSpeakingPerson = new SpeakingEntity() {&lt;br&gt;            &lt;br&gt;    @Override&lt;br&gt;    public void sayHello() {&lt;br&gt;        System.out.println(&quot;Hello!&quot;);&lt;br&gt;    }&lt;br&gt;&lt;br&gt;    @Override&lt;br&gt;    public void sayBye() {&lt;br&gt;        System.out.println(&quot;Bye!&quot;);&lt;br&gt;    }&lt;br&gt;};&lt;/code&gt;&lt;/pre&gt; &lt;br&gt;&lt;/div&gt;&lt;div&gt;The anonymous class is declared and instantiated inside a method. It overrides both methods of the interface.&lt;/div&gt;&lt;div&gt;We assign an instance of the &lt;b&gt;anonymous class&lt;/b&gt; to the variable of the interface type. Now, we can invoke overridden methods:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;englishSpeakingPerson.sayHello();&lt;br&gt;englishSpeakingPerson.sayBye();&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Of course, the result is&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Hello!&lt;br&gt;Bye!&lt;/code&gt;&lt;/pre&gt; &lt;br&gt;&lt;/div&gt;&lt;div&gt;Let's declare and instantiate another anonymous class:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;SpeakingEntity cat = new SpeakingEntity() {&lt;br&gt;&lt;br&gt;    @Override&lt;br&gt;    void sayHello() {&lt;br&gt;        System.out.println(&quot;Meow!&quot;);&lt;br&gt;    }&lt;br&gt;&lt;br&gt;    @Override&lt;br&gt;    public void sayBye() {&lt;br&gt;        System.out.println(&quot;Meow!&quot;);&lt;br&gt;    }&lt;br&gt;};&lt;/code&gt;&lt;/pre&gt; &lt;br&gt;&lt;/div&gt;&lt;div&gt;When we invoke the same methods, we obtain the following result:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Meow!&lt;br&gt;Meow!&lt;/code&gt;&lt;/pre&gt; &lt;br&gt;&lt;/div&gt;&lt;div&gt;So, &lt;b&gt;englishSpeakingPerson&lt;/b&gt; and &lt;b&gt;cat&lt;/b&gt; are instances of different anonymous classes which implement the same interface.&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/div&gt;&lt;h2&gt;&lt;b&gt;&lt;/b&gt;Accessing context variables&lt;/h2&gt;&lt;div&gt;In the body of an anonymous class, it is possible to capture variables from a context where it is defined:&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;an anonymous class can capture members of its enclosing class (the outer class);&lt;/li&gt;&lt;li&gt;an anonymous class can capture local variables that are declared as &lt;b&gt;final&lt;/b&gt; or they are &lt;b&gt;effectively final&lt;/b&gt; (i.e. the variable is not changed but has no the &lt;b&gt;final &lt;/b&gt;keyword).&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Here is another anonymous class that implements the &lt;b&gt;SpeakingEntity&lt;/b&gt; interface:&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class AnonymousClassExample {&#10;&#10;    private static String BYE_STRING = &quot;Auf Wiedersehen!&quot;; // static constant&#10;&#10;    public static void main(String[] args) {&#10;&#10;        final String hello = &quot;Guten Tag!&quot;; // final local variable&#10;&#10;        SpeakingEntity germanSpeakingPerson = new SpeakingEntity() {&#10;&#10;            @Override&#10;            public void sayHello() {&#10;                System.out.println(hello); // it captures the local variable&#10;            }&#10;&#10;            @Override&#10;            public void sayBye() {&#10;                System.out.println(BYE_STRING); // it captures the constant field&#10;            }&#10;        };&#10;&#10;        germanSpeakingPerson.sayHello();&#10;&#10;        germanSpeakingPerson.sayBye();&#10;    }&#10;}&lt;/code&gt;&lt;/pre&gt; &lt;br&gt;The anonymous class captures the constant field &lt;b&gt;BYE_STRING&lt;/b&gt; and the local final variable &lt;b&gt;hello&lt;/b&gt;. This code is successfully compiled and print what we expect:&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Guten Tag!&lt;br&gt;Auf Wiedersehen!&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Important:&lt;/b&gt; a declaration of a variable or a method in an anonymous class shadows any other declaration in the enclosing scope that has the same name. You cannot access any shadowed declarations by their names.&lt;/p&gt;&lt;h2&gt;&lt;b&gt;&lt;/b&gt;Restrictions on anonymous classes&lt;/h2&gt;&lt;p&gt;Anonymous classes have some restrictions:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;they cannot have static initializers or member interfaces;&lt;/li&gt;&lt;li&gt;they cannot have static members, except the constant variables (final static fields);&lt;/li&gt;&lt;li&gt;they cannot have constructors.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;For example, let's see the following anonymous class that has a final static field and an instance initializer to substitute a constructor:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;pre&gt;final String robotName = &quot;Bug&quot;;&lt;br&gt;final int robotAssemblyYear = 2112;&lt;br&gt;&lt;br&gt;SpeakingEntity robot = new SpeakingEntity() {&lt;br&gt;&lt;br&gt;    static final int MAGIC_CONSTANT = 10;&lt;br&gt;&lt;br&gt;    private String name;&lt;br&gt;    private int assemblyYear;&lt;br&gt;&lt;br&gt;    { /* instance initialization block for setting fields */&lt;br&gt;        name = robotName;&lt;br&gt;        assemblyYear = robotAssemblyYear;&lt;br&gt;    }&lt;br&gt;&lt;br&gt;    @Override&lt;br&gt;    public void sayHello() {&lt;br&gt;        System.out.println(&quot;1010001&quot; + MAGIC_CONSTANT);&lt;br&gt;    }&lt;br&gt;&lt;br&gt;    @Override&lt;br&gt;    public void sayBye() {&lt;br&gt;        System.out.println(&quot;0101110&quot; + MAGIC_CONSTANT);&lt;br&gt;    }&lt;br&gt;};&lt;/pre&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;b&gt;&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;&lt;/b&gt;When to use anonymous classes&lt;br&gt;&lt;/h2&gt;&lt;p&gt;In common case, you should consider using an anonymous class when:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;only one instance of the class is needed;&lt;/li&gt;&lt;li&gt;the class has a very short body;&lt;/li&gt;&lt;li&gt;the class is used right after it's defined.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;So, in this topic, we've considered rather simple anonymous classes to understand their base syntax, but in real applications, they give a powerful mechanism to create classes that encapsulate behaviors and pass them to suitable methods. It gives us a convenient way to interact with parts of our application or with some third-party libraries.&lt;/p&gt;&lt;p&gt;For instance, anonymous classes are actively used when writing user interfaces using the standard Java library called &lt;b&gt;Swing&lt;/b&gt;. The same thing when developing a web user interface using &lt;b&gt;Google Web Toolkit (GWT)&lt;/b&gt;. It is very common to have a lot of listeners which are only used just once for one button, so using anonymous classes allows us to avoid writing a lot of classes and having useless files in the development of the code.&lt;/p&gt;&lt;p&gt;Some widespread libraries for working through the &lt;b&gt;HTTP&lt;/b&gt; protocol also uses anonymous classes. Here is an example: &lt;a rel=&quot;nofollow&quot; href=&quot;https://hc.apache.org/httpcomponents-asyncclient-dev/quickstart.html&quot;&gt;https://hc.apache.org/httpcomponents-asyncclient-dev/quickstart.html&lt;/a&gt;. You may not now understand how to use it, but notice how many anonymous classes there are.&lt;/p&gt;&lt;/div&gt;&lt;h2&gt;&lt;b&gt;&lt;/b&gt;Learn callbacks by example&lt;/h2&gt;&lt;div&gt;Often, after creating an instance of an anonymous class we pass it to a method as an argument. In this case, the anonymous class is called the &lt;b&gt;callback&lt;/b&gt;. It's a piece of executable code that is passed to other code, which executes it (perform a call back) at some convenient time.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Let's consider an example. There is a special kind of calculators that can only divide numbers. The calculator takes a callback as its argument and executes the callback passing the result of calculation or an error message.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The &lt;b&gt;Callback&lt;/b&gt; interface has two abstract methods:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;interface Callback {&#10;&#10;    /**&#10;     * Takes a result and process it&#10;     */&#10;    void calculated(int result);&#10;&#10;    /**&#10;     * Takes an error message&#10;     */&#10;    void failed(String errorMsg);&#10;}&lt;/code&gt;&lt;/pre&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;The class &lt;b&gt;Divider&lt;/b&gt; has only one static method (just an example, the demonstrated technique works with any methods):&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;class Divider {&lt;br&gt;&lt;br&gt;    /**&lt;br&gt;     * Divide a by b. It executes the specified callback to process results&lt;br&gt;     */&lt;br&gt;    public static void divide(int a, int b, Callback callback) {&lt;br&gt;&lt;br&gt;        if (b == 0) {&lt;br&gt;            callback.failed(&quot;Division by zero!&quot;);&lt;br&gt;            return;&lt;br&gt;        }&lt;br&gt;&lt;br&gt;        callback.calculated(a / b);&lt;br&gt;    }&lt;br&gt;}&lt;/code&gt;&lt;/pre&gt; &lt;br&gt;&lt;/div&gt;&lt;div&gt;Of course, in this case, you can perform the division and return the result without any callbacks, but they can help you in large applications with multiple parts and layers (especially in multithreaded programs).&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Calling a method with a callback:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class CallbacksExample {&#10;&#10;    public static void main(String[] args) {&#10;f a calculation&#10;        Scanner scanner = new Scanner(System.in);&#10;&#10;        int a = scanner.nextInt();&#10;        int b = scanner.nextInt();&#10;&#10;        Divider.divide(a, b, new Callback() { // passing callback as an argument&#10;&#10;            @Override&#10;            public void calculated(int result) {&#10;                String textToPrint = String.format(&quot;%d / %d is %d&quot;, a, b, result);&#10;                print(textToPrint);&#10;            }&#10;&#10;            @Override&#10;            public void failed(String errorMsg) {&#10;                print(errorMsg);&#10;            }&#10;        });&#10;    }&lt;br&gt;&lt;br&gt;    public static void print(String text) {&#10;        System.out.println(text);&lt;br&gt;    }&#10;}&lt;/code&gt;&lt;/pre&gt; &lt;br&gt;&lt;/div&gt;&lt;div&gt;As you can see, we instantiate and pass the callback without any additional variables of the &lt;b&gt;Callback&lt;/b&gt; type. It's very common practice for working with callbacks, especially if they are small.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The callback captures the static method &lt;b&gt;print&lt;/b&gt; and the local variables &lt;b&gt;a&lt;/b&gt; and &lt;b&gt;b &lt;/b&gt;from its context. The variables &lt;b&gt;a&lt;/b&gt; and &lt;b&gt;b&lt;/b&gt; are &lt;b&gt;effectively final &lt;/b&gt;here.&lt;b&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Let's run the program.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The input 1:&lt;/div&gt;&lt;div&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;8 2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The output 1:&lt;br&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;8 / 2 is 4&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The input 2:&lt;/div&gt;&lt;div&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;10 0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The output 2:&lt;/div&gt;&lt;div&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Division by zero!&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;So, anonymous classes along with the context capture mechanism allow you to transfer logic between parts of your program. They are used as callbacks in large applications and when working with external libraries.&lt;/div&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="5" />
                      <option name="name" value="Theory (1)" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294754" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won’t be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521362946000" />
                    </TheoryTask>
                    <ChoiceTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="choiceVariants">
                        <list>
                          <option value="An anonymous class cannot be passed to a method as an argument." />
                          <option value="An anonymous class can capture local variables which can change." />
                          <option value=" An anonymous class can capture members of its enclosing class (an outer class)." />
                          <option value=" An anonymous class always implement an interface or extends a class." />
                          <option value="An anonymous class can have fields and constructors." />
                          <option value=" An anonymous class is declared and instantiated in a single statement." />
                        </list>
                      </option>
                      <option name="customPresentableName" value="Quiz" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="Select all correct statements about &lt;b&gt;anonymous classes&lt;/b&gt;." />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="6" />
                      <option name="multipleChoice" value="true" />
                      <option name="name" value="Quiz (1)" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294755" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521362946000" />
                    </ChoiceTask>
                  </list>
                </option>
                <option name="unitId" value="54821" />
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="77971" />
                <option name="index" value="10" />
                <option name="name" value="Generics Basics" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="1521364504000" />
                <option name="taskList">
                  <list>
                    <TheoryTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;Generic programming means that &lt;em&gt;types&lt;/em&gt; (classes and interfaces) can be &lt;i&gt;parameters&lt;/i&gt; when defining classes, interfaces, and methods.&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;// Class GenericClass have &lt;i&gt;type parameter&lt;/i&gt; T&#10;public class GenericClass&amp;lt;T&amp;gt; {}&#10;&#10;// Interface GenericInterface have &lt;i&gt;type parameters&lt;/i&gt; T and U&#10;public interface GenericInterface&amp;lt;T, U&amp;gt; {}&#10;&#10;public class ClassWithGenericMethod {&#10;    // Method genericMethod have &lt;i&gt;type parameter&lt;/i&gt; T &#10;    public &amp;lt;T&amp;gt; T genericMethod(T in) {&#10;        return in;&#10;    }&#10;}&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;In the code above class, interface and method are declared to have &lt;i&gt;type parameters&lt;/i&gt;. Each declaration of type parameter introduces &lt;i&gt;type variable &lt;/i&gt;that can be used inside class interface or method body (see below for details)&lt;i&gt;. &lt;/i&gt;Sometimes terms &lt;i&gt;type parameter&lt;/i&gt; and &lt;i&gt;type variable&lt;/i&gt; are used as a synonym.&lt;/p&gt;&lt;p&gt;Type parameters in Java are declared with angle brackets. Any number of type parameters may be declared:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;class GenericClassWithMultipleTypeParameters&amp;lt;T, U, V, W&amp;gt; {}&lt;/code&gt;&lt;/pre&gt; &#10;&#10;&lt;p&gt;Type parameter identifier has the same naming restrictions as any other &lt;a rel=&quot;nofollow&quot; href=&quot;http://docs.oracle.com/javase/specs/jls/se8/html/jls-3.html#jls-3.8&quot;&gt;Java type&lt;/a&gt;. In principle it is possible to declare generic class as follows:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;class GenericClass&amp;lt;My1stTypeParameter&amp;gt; {}&lt;/code&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;However, there are naming conventions restricting type parameter name choices for single, uppercase letters. Without this, it would be difficult to tell the difference between a type variable and an ordinary class or interface name:&lt;div&gt;&lt;br&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;pre&gt;&lt;code&gt;&lt;pre&gt;// Ordinary class&#10;class TypeParameter {}&lt;br&gt;&#10;// 'The type parameter TypeParameter is hiding the type TypeParameter' compiler warning tells &#10;//     that type parameter hides type defined by class &#10;class ClassViolatingNamingConventions&amp;lt;TypeParameter&amp;gt; {&#10;  // Is it a type variable or TypeParameter class type!?&#10;  private TypeParameter typeParameter;&lt;br&gt;}&lt;/pre&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;The most commonly used type parameter names are:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;T – Type&lt;br&gt;&lt;/li&gt;&lt;li&gt;S, U, V etc. – 2nd, 3rd, 4th types&lt;br&gt;&lt;/li&gt;&lt;li&gt;E – Element (used extensively by the Java Collections Framework)&lt;/li&gt;&lt;li&gt;K – Key&lt;/li&gt;&lt;li&gt;V – Value&lt;br&gt;&lt;/li&gt;&lt;li&gt;N – Number&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&#10;&#10;&#10;&#10;&lt;p&gt;After being declared type parameter can be used inside the class body as ordinary type, e.g.:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;A type of a &lt;i&gt;field&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Constructor&lt;/i&gt; argument type&lt;/li&gt;&lt;li&gt;&lt;i&gt;Method&lt;/i&gt; argument type and return type&lt;/li&gt;&lt;li&gt;&lt;i&gt;Inner class&lt;/i&gt; type and field declarations&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;class GenericClass&amp;lt;T&amp;gt; {&lt;br&gt;    &lt;br&gt;  private T field;&lt;br&gt;  &lt;br&gt;  public GenericClass(T field) {&lt;br&gt;    this.field = field;&lt;br&gt;  }&lt;br&gt;  &lt;br&gt;    public T method(T parameter) {&lt;br&gt;        T variable = parameter;&lt;br&gt;        return variable;&lt;br&gt;    }&lt;br&gt;    &lt;br&gt;    class InnerClass {&lt;br&gt;      &lt;br&gt;      private T innerField;&lt;br&gt;      &lt;br&gt;      public InnerClass(T innerField) {&lt;br&gt;        this.innerField = innerField;&lt;br&gt;      }&lt;br&gt;    }&lt;br&gt;}&#10;&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;p&gt;If type parameter is applied to a method it can specify:&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Type of an &lt;i&gt;argument&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Return&lt;/i&gt; type&lt;/li&gt;&lt;li&gt;Type of &lt;i&gt;variable&lt;/i&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;i&gt;&lt;/i&gt;&lt;/p&gt;&lt;pre&gt;&lt;pre&gt;&lt;code&gt;class GlassWithGenericMethod {&lt;br&gt;  // Generic method declaration&lt;br&gt;  public &amp;lt;T&amp;gt; T method(T parameter) {&lt;br&gt;    T variable = parameter;&lt;br&gt;    return variable;&lt;br&gt;  }&lt;br&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;/pre&gt;&lt;p&gt;It may seem like type variable being used inside class or method body is absolutely equivalent to ordinary type, but this is not the case. Type parameters are not &lt;i&gt;reifiable&lt;/i&gt;, so some operations like instance testing can't be applied to them (we will discuss this in depth in a special lesson).&lt;/p&gt;&#10;&#10;&#10;&#10;&lt;p&gt;When using a generic class, interface or method &lt;i&gt;generic type invocation&lt;/i&gt;, which replaces &lt;i&gt;type parameters&lt;/i&gt; with some concrete &lt;i&gt;type values&lt;/i&gt;, should be performed:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;// Generic class declaration&#10;class GenericClass&amp;lt;T&amp;gt; {&lt;br&gt;    &lt;br&gt;  private T field;&lt;br&gt;  &lt;br&gt;  public GenericClass(T field) {&lt;br&gt;    this.field = field;&lt;br&gt;  }&lt;br&gt;  &lt;br&gt;    public &amp;lt;T&amp;gt; T method(T parameter) {&lt;br&gt;        T variable = parameter;&lt;br&gt;        return variable;&lt;br&gt;    }&lt;br&gt;}&#10;&#10;class Main {&#10;&#10;    public static void main(String[] args) {&#10;        // Generic type invocation: T is replaces with concrete type (Integer)&#10;        // Note the use of diamond operator '&amp;lt;&amp;gt;' introduced in Java 7&#10;        // Type argument is inferred from constructor parameter&#10;        GenericClass&amp;lt;Integer&amp;gt; generic = new GenericClass&amp;lt;&amp;gt;(10);&#10;    }&#10;&#10;}&lt;br&gt;&lt;/code&gt;&lt;/pre&gt; &lt;br&gt;&lt;/pre&gt;In Java SE 7 and later it's possible to replace the type arguments required to invoke the constructor of a generic class with an empty set of type arguments as long as the compiler can&lt;i&gt; infer&lt;/i&gt; the type arguments from the context. The pair of angle brackets is informally called &lt;i&gt;diamond operator&lt;/i&gt;.&#10;&#10;&lt;p&gt;Generics makes possible code that can work with objects of different classes without casting. Multiple examples of this can be found in Java Collections classes. That's reasonable since an exact type of element in the collection often doesn't influence implementation.&lt;/p&gt;&lt;p&gt;Let's look at source code of &lt;a rel=&quot;nofollow&quot; href=&quot;http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/6-b14/java/util/ArrayList.java#ArrayList.add%28java.lang.Object%29&quot;&gt;java.util.ArrayList.add&lt;/a&gt; method:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;div&gt;&lt;pre&gt;&lt;pre&gt;/**&#10; * Appends the specified element to the end of this list.&#10; *&#10; * @param e element to be appended to this list&#10; * @return &amp;lt;tt&amp;gt;true&amp;lt;/tt&amp;gt; (as specified by {@link Collection#add})&#10; */&#10;public boolean add(E e) {&#10;    ensureCapacity(size + 1);  // Increments modCount!!&#10;    elementData[size++] = e;&#10;    return true;&#10;}&lt;/pre&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Since ArrayList can work with objects of any reference type (there are no properties that make object suitable (or unsuitable) to be added to array list), it's convenient to have one class that could work with any reference type.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Without generics it may look like:&lt;/div&gt;&lt;div&gt;&lt;pre&gt;&lt;code&gt;class StringArrayList {&#10;    public boolean add(String e) { ... }&#10;}&#10;&#10;class IntegerArrayList {&#10;    public boolean add(Integer e) { ... }&#10;}&#10;&#10;// And infinite number of ArrayList classes for every possible class to be array element&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;As you can see, the code is compile-time safe but the price is lack of flexibility. Before Generics in Java the alternative may look like:&lt;/div&gt;&lt;div&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;class ArrayList {&#10;    public boolean add(Object e) { ... }&#10;    public Object get(int index) { ... }&#10;}&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;This requires casting and therefore may lead to runtime errors:&lt;/div&gt;&lt;div&gt;&lt;pre&gt;&lt;code&gt;List list = new integerList();&#10;integerList.add(1);&#10;integerList.add(&quot;two&quot;);&#10;&#10;// Now we want to retrieve integer elements from the list&#10;// We need itegers, not Objects, so casting is required&#10;Integer int0 = (Integer) integer.get(0);&#10;Integer int1 = (Integer) integer.get(1); // runtime error!&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;So, there is flexibility but no compile-time safety.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;With generics it is much better:&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;&lt;code&gt;List&amp;lt;Integer&amp;gt; list = new integerList&amp;lt;&amp;gt;();&#10;integerList.add(1);&#10;integerList.add(&quot;two&quot;); // compile-time error!&#10;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;A compile-time error is detected by the programmer, not the user of the program. This makes generics both flexible and safe.&lt;/div&gt;&#10;&#10;&#10;&#10;&lt;p&gt;Generics in Java are &lt;i&gt;invariant&lt;/i&gt; meaning that GenericClass&amp;lt;T&amp;gt; is not subclass, nor superclass of GenericClass&amp;lt;S&amp;gt; if S is a subclass of T (except the trivial case of S equals T).&lt;/p&gt;&lt;p&gt;However, generics do not disrupt class inheritance hierarchy, i.e.:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;ArrayList&amp;lt;E&amp;gt; is a subtype of List&amp;lt;E&amp;gt;&lt;/code&gt;&lt;/pre&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="Theory" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294504" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won’t be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521363285000" />
                    </TheoryTask>
                    <ChoiceTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="choiceVariants">
                        <list>
                          <option value="Generics make code more fast." />
                          <option value="Generics make a possible code that can work with objects of different classes without casting. " />
                          <option value="Generics provide type safety by shifting more type checking responsibilities to the compiler." />
                        </list>
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="Select all benefits of using generics." />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="2" />
                      <option name="multipleChoice" value="true" />
                      <option name="name" value="Quiz" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294758" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521363285000" />
                    </ChoiceTask>
                    <ChoiceTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="choiceVariants">
                        <list>
                          <option value="the name of a class (for example, Object)" />
                          <option value="the name of an enum (for example, DayOfWeek)" />
                          <option value="the name of a primitive type (for example, int)" />
                          <option value="char" />
                          <option value="it's possible to omit the value and use the class as non-generic" />
                          <option value="the value of a primitive type (for example, 42)" />
                          <option value="String" />
                          <option value="the name of an interface (for example, CharSequence)" />
                        </list>
                      </option>
                      <option name="customPresentableName" value="Quiz" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;There is a generic class&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class Example&amp;lt;X&amp;gt; {&#10;    ...&#10;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;What can be used as the X parameter value?&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="3" />
                      <option name="multipleChoice" value="true" />
                      <option name="name" value="Quiz (1)" />
                      <option name="selectedVariants">
                        <list />
                      </option>
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294761" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.java" />
                                <option name="text" value="// you can experiment here, it won't be checked&#10;&#10;class Task {&#10;  public static void main(String[] args) {&#10;    // put your code here&#10;  }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521363285000" />
                    </ChoiceTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;&lt;b&gt;Pie company&lt;/b&gt;&lt;/p&gt;&lt;p&gt;You are asked to help with Java programming in a Pie company.&lt;/p&gt;&lt;p&gt;At the moment they bake and sell pies, cakes and tarts packed in nice boxes. Unfortunately, approach to boxes programming is quite outdated – each pie type requires its own box class. This approach is poorly scalable and will turn the situation into a nightmare with product range growth (imagine all these ApplePieBox, StrawberryPieBox, etc.).&lt;/p&gt;&lt;p&gt;To avoid this implement universal Box class that will accommodate anything with put and give it back with getters.&lt;/p&gt;&lt;p&gt;Use the provided code template, don't remove existing classes.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="4" />
                      <option name="name" value="Programming" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294759" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="class Cake {}&#10;&#10;class Pie {}&#10;&#10;class Tart {}&#10;&#10;/**&#10; Box for cakes&#10; */&#10;class CakeBox {&#10;&#10;  private Cake cake;&#10;&#10;  public void put(Cake cake) {&#10;    this.cake = cake;&#10;  }&#10;&#10;  public Cake get() {&#10;    return this.cake;&#10;  }&#10;}&#10;&#10;/**&#10; Box for pies&#10; */&#10;class PieBox {&#10;&#10;  private Pie pie;&#10;&#10;  public void put(Pie pie) {&#10;    this.pie = pie;&#10;  }&#10;&#10;  public Pie get() {&#10;    return this.pie;&#10;  }&#10;}&#10;&#10;&#10;/**&#10; Box for tarts&#10; */&#10;class TartBox {&#10;&#10;  private Tart tart;&#10;&#10;  public void put(Tart tart) {&#10;    this.tart = tart;&#10;  }&#10;&#10;  public Tart get() {&#10;    return this.tart;&#10;  }&#10;}&#10;&#10;/*&#10;    Hundred more such boring classes OR ...&#10;    magic class for everything everybody is waiting for&#10;*/&#10;class Box ..." />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521363285000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Programming" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;&lt;b&gt;Generic pairs&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Implement the generic class &lt;i&gt;Pair&lt;/i&gt; which contains a pair of objects (of any types). The objects can be null.&lt;/p&gt;&lt;p&gt;You should implement the methods &lt;i&gt;getFirst()&lt;/i&gt;, &lt;i&gt;getSecond()&lt;/i&gt;, &lt;i&gt;equals()&lt;/i&gt; and &lt;i&gt;hashCode() &lt;/i&gt;and the static method &lt;i&gt;of()&lt;/i&gt; for creating instances as well. The constructor must be private.&lt;/p&gt;&lt;p&gt;Be careful with nulls when implementing &lt;i&gt;equals()&lt;/i&gt; and &lt;i&gt;hashCode().&lt;/i&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;If your class has been implemented correctly, the following code should be compiled and work successfully.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;pre&gt;Pair&amp;lt;Integer, String&amp;gt; pair = Pair.of(1, &quot;hello&quot;);&lt;br&gt;Integer i = pair.getFirst(); // 1&lt;br&gt;String s = pair.getSecond(); // &quot;hello&quot;&lt;br&gt;&lt;br&gt;Pair&amp;lt;Integer, String&amp;gt; pair2 = Pair.of(1, &quot;hello&quot;);&lt;br&gt;boolean mustBeTrue = pair.equals(pair2); // true!&lt;br&gt;boolean mustAlsoBeTrue = pair.hashCode() == pair2.hashCode(); // true!&lt;/pre&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Do not change the access modifier of the class Pair.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Memory limit&lt;/b&gt;: 256 Mb&lt;br&gt;&lt;b&gt;Time limit&lt;/b&gt;: 5s&lt;br&gt;&lt;br&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="5" />
                      <option name="name" value="Programming (1)" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="294762" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="class Pair {&#10;&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map />
                      </option>
                      <option name="updateDate" value="1521364504000" />
                    </CodeTask>
                  </list>
                </option>
                <option name="unitId" value="54822" />
              </Lesson>
            </list>
          </option>
        </RemoteCourse>
      </option>
      <option name="VERSION" value="11" />
      <option name="myUserTests">
        <map />
      </option>
    </StudyTaskManager>
  </component>
</project>